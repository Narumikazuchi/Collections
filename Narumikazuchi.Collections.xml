<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Narumikazuchi.Collections.Abstract</name>
    </assembly>
    <members>
        <member name="T:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1">
            <summary>
            Represents a collection whose underlying item storage is an array.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1.EnsureCapacity(System.Int32@)">
            <summary>
            Expands the underlying array to fit the specified number of items, if necessary.
            </summary>
            <param name="capacity">The number of items to fit into this collection.</param>
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1.IsCompatibleObject(System.Object)">
            <summary>
            Checks whether the specified object can be added to the collection.
            </summary>
            <param name="value">The object to check.</param>
            <returns><see langword="true"/> if the object can be added to the list; else <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1.ToArray">
            <summary>
            Copies the entire <see cref="T:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1"/> into a new array.
            </summary>
            <returns>A new array containing all items from this collection</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1"/>.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1"/> has a fixed size.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1.SyncRoot">
            <summary>
            Gets the object mutex used to synchronize acces to this <see cref="T:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1"/>.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1._emptyArray">
            <summary>
            Statically allocates an empty array to use for every <see cref="T:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1"/> using the type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1._syncRoot">
            <summary>
            The internal mutex for synchronizing multi-threaded access.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1._items">
            <summary>
            Internally manages and contains the items for the <see cref="T:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1"/>.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1._size">
            <summary>
            Internally manages and contains the actual amount of items in the <see cref="T:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1"/>.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1._version">
            <summary>
            Keeps track of changes done to the collection, preventing invalid operations during enumeration.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1.DEFAULTCAPACITY">
            <summary>
            Represents the default capacity for a new <see cref="T:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1"/>.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.Abstract.ArrayBasedCollection`1.MAXARRAYSIZE">
            <summary>
            Represents the max. size to which the internal array can expand to.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.CollectionBase`1">
            <summary>
            Represents a strongly typed collection of objects. 
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`1.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:Narumikazuchi.Collections.Abstract.CollectionBase`1"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.CollectionBase`1"/> class having the specified collection of items.
            </summary>
            <param name="collection">The initial collection of items in this list.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>.
            </summary>
            <param name="collection">The collection of items to add.</param>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`1.RemoveAll(System.Func{`0,System.Boolean})">
            <summary>
            Removes all items from the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/> that match the specified condition.
            </summary>
            <param name="predicate">The condition to determine if an item should be removed.</param>
            <returns>The number of items removed from the list</returns>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IndexOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`1.Reverse">
            <summary>
            Reverses the order of items in the entire <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>.
            </summary>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:Narumikazuchi.Collections.Abstract.CollectionBase`1"/> to a compatible one-dimensional <see cref="T:System.Array"/>, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
            from <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`1.Add(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:Narumikazuchi.Collections.Abstract.CollectionBase`1"/>.
            </summary>
            <param name="item">The object to be added to the end of the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:Narumikazuchi.Collections.Abstract.CollectionBase`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Narumikazuchi.Collections.Abstract.CollectionBase`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Narumikazuchi.Collections.Abstract.CollectionBase`1"/>. The value can be null for reference types.</param>
            <returns>
            <see langword="true"/> if item is successfully removed; otherwise, <see langword="false"/>.
            This method also returns <see langword="false"/> if item was not found in the original <see cref="T:Narumikazuchi.Collections.Abstract.CollectionBase`1"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.CollectionBase`1.IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.CollectionBase`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.ListBase`1">
            <summary>
            Represents a strongly typed list of objects, which can be accessed by index. 
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.#ctor(System.Int32@)">
            <summary>
            Initializes a new empty instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/> class having the specified capacity.
            </summary>
            <param name="capacity">The capacity of this list.</param>
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/> class having the specified collection of items.
            </summary>
            <param name="collection">The initial collection of items in this list.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>.
            </summary>
            <param name="collection">The collection of items to add.</param>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the items from the specified collection into this <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/> starting at the specified index.
            </summary>
            <param name="index">The index where to start inserting the new items.</param>
            <param name="collection">The collection of items to insert.</param>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.MoveItem(System.Int32,Narumikazuchi.Collections.ItemMoveDirection)">
            <summary>
            Moves the item at the given index one position in the specified direction in the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.MoveItem(System.Int32,Narumikazuchi.Collections.ItemMoveDirection,System.Int32)">
            <summary>
            Moves the item at the given index the given amount of positions in the specified direction in the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.MoveItem(`0@,Narumikazuchi.Collections.ItemMoveDirection)">
            <summary>
            Moves the item one position in the specified direction in the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.MoveItem(`0@,Narumikazuchi.Collections.ItemMoveDirection,System.Int32)">
            <summary>
            Moves the item at the given index the given amount of positions in the specified direction in the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.RemoveAll(System.Func{`0,System.Boolean})">
            <summary>
            Removes all items from the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/> that match the specified condition.
            </summary>
            <param name="predicate">The condition to determine if an item should be removed.</param>
            <returns>The number of items removed from the list</returns>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IndexOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.RemoveRange(System.Int32@,System.Int32@)">
            <summary>
            Removes a range of items from the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>.
            </summary>
            <param name="index">The index of the first item to remove.</param>
            <param name="count">The amount of items to remove.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.IndexOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.Reverse">
            <summary>
            Reverses the order of items in the entire <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>.
            </summary>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.Reverse(System.Int32@,System.Int32@)">
            <summary>
            Reverses the order of items in the specified range in the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>.
            </summary>
            <param name="index">The index of the first item in the range.</param>
            <param name="count">The length of the range to reverse.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/> to a compatible one-dimensional <see cref="T:System.Array"/>, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
            from <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.Add(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>.
            </summary>
            <param name="item">The object to be added to the end of the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>. The value can be null for reference types.</param>
            <returns>
            <see langword="true"/> if item is successfully removed; otherwise, <see langword="false"/>.
            This method also returns <see langword="false"/> if item was not found in the original <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.ListBase`1.IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.ListBase`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ListBase`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.ListBase`1.Capacity">
            <summary>
            Gets or sets the amount of items the <see cref="T:Narumikazuchi.Collections.Abstract.ListBase`1"/> can hold without resizing itself.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`1">
            <summary>
            Represents a strongly typed collection of objects. 
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`1"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`1"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts all elements in the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`1"/> into another type and returns an <see cref="T:System.Collections.Generic.IList`1"/>
            containing the converted objects.
            </summary>
            <param name="converter">A delegate which converts every item into the new type.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> which contains the converted objects</returns>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action for every element of this <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`1"/>.
            </summary>
            <param name="action">The action to perform on each item.</param>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`1.Contains(`0)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`1"/> is read-only.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.ReadOnlyListBase`1">
            <summary>
            Represents a strongly typed list of objects, which can be accessed by index. 
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyListBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlyListBase`1"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyListBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlyListBase`1"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyListBase`1.CopyTo(`0[])">
            <summary>
            Copies the entire <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlyListBase`1"/> to the specified one-dimensional array.
            </summary>
            <param name="array">An array with a fitting size to copy the items into.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyListBase`1.CopyTo(System.Int32@,System.Int32@,`0[],System.Int32@)">
            <summary>
            Copies a section of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlyListBase`1"/> to the specified one-dimensional array.
            The section starts at the specified index, entails the specified count of items and begins inserting them
            at the specified starting index into the array.
            </summary>
            <param name="index">The index of the first item of this list to copy.</param>
            <param name="count">The amount of items to copy from this list.</param>
            <param name="array">An array with a fitting size to copy the items into.</param>
            <param name="arrayIndex">The index at which to start inserting items into the array.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyListBase`1.GetRange(System.Int32@,System.Int32@)">
            <summary>
            Creates a shallow copy of the elements of this <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlyListBase`1"/> from the specified range.
            </summary>
            <param name="index">The index of the first item in the resulting range.</param>
            <param name="count">The amount of items in the range.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> containing the items from the specified range</returns>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyListBase`1.IndexOf(`0)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.ReadOnlyListBase`1.Item(System.Int32)">
            <inheritdoc />
            <exception cref="T:System.IndexOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1">
            <summary>
            Represents a strongly typed collection of objects, which can be searched. 
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1"/> class having the specified collection of items.
            </summary>
            <param name="collection">The initial collection of items in this list.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1"/>.
            </summary>
            <param name="collection">The collection of items to add.</param>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1.RemoveAll(System.Func{`0,System.Boolean})">
            <summary>
            Removes all items from the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1"/> that match the specified condition.
            </summary>
            <param name="predicate">The condition to determine if an item should be removed.</param>
            <returns>The number of items removed from the list</returns>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IndexOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1.Reverse">
            <summary>
            Reverses the order of items in the entire <see cref="T:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1"/>.
            </summary>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1"/> to a compatible one-dimensional <see cref="T:System.Array"/>, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
            from <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1.Add(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1"/>.
            </summary>
            <param name="item">The object to be added to the end of the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1"/>. The value can be null for reference types.</param>
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1"/>. The value can be null for reference types.</param>
            <returns>
            <see langword="true"/> if item is successfully removed; otherwise, <see langword="false"/>.
            This method also returns <see langword="false"/> if item was not found in the original <see cref="T:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1.IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.SearchableCollectionBase`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1">
            <summary>
            Represents a strongly typed list of objects, which can be accessed by index and searched. 
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableListBase`1.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableListBase`1.#ctor(System.Int32@)">
            <summary>
            Initializes a new empty instance of the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/> class having the specified capacity.
            </summary>
            <param name="capacity">The capacity of this list.</param>
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableListBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/> class having the specified collection of items.
            </summary>
            <param name="collection">The initial collection of items in this list.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableListBase`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/>.
            </summary>
            <param name="collection">The collection of items to add.</param>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableListBase`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the items from the specified collection into this <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/> starting at the specified index.
            </summary>
            <param name="index">The index where to start inserting the new items.</param>
            <param name="collection">The collection of items to insert.</param>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableListBase`1.MoveItem(System.Int32,Narumikazuchi.Collections.ItemMoveDirection)">
            <summary>
            Moves the item at the given index one position in the specified direction in the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableListBase`1.MoveItem(System.Int32,Narumikazuchi.Collections.ItemMoveDirection,System.Int32)">
            <summary>
            Moves the item at the given index the given amount of positions in the specified direction in the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableListBase`1.MoveItem(`0@,Narumikazuchi.Collections.ItemMoveDirection)">
            <summary>
            Moves the item one position in the specified direction in the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableListBase`1.MoveItem(`0@,Narumikazuchi.Collections.ItemMoveDirection,System.Int32)">
            <summary>
            Moves the item at the given index the given amount of positions in the specified direction in the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableListBase`1.RemoveAll(System.Func{`0,System.Boolean})">
            <summary>
            Removes all items from the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/> that match the specified condition.
            </summary>
            <param name="predicate">The condition to determine if an item should be removed.</param>
            <returns>The number of items removed from the list</returns>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IndexOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableListBase`1.RemoveRange(System.Int32@,System.Int32@)">
            <summary>
            Removes a range of items from the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/>.
            </summary>
            <param name="index">The index of the first item to remove.</param>
            <param name="count">The amount of items to remove.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.IndexOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableListBase`1.Reverse">
            <summary>
            Reverses the order of items in the entire <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/>.
            </summary>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableListBase`1.Reverse(System.Int32@,System.Int32@)">
            <summary>
            Reverses the order of items in the specified range in the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/>.
            </summary>
            <param name="index">The index of the first item in the range.</param>
            <param name="count">The length of the range to reverse.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableListBase`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/> to a compatible one-dimensional <see cref="T:System.Array"/>, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
            from <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableListBase`1.Add(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/>.
            </summary>
            <param name="item">The object to be added to the end of the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/>. The value can be null for reference types.</param>
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableListBase`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableListBase`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/>. The value can be null for reference types.</param>
            <returns>
            <see langword="true"/> if item is successfully removed; otherwise, <see langword="false"/>.
            This method also returns <see langword="false"/> if item was not found in the original <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.SearchableListBase`1.IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.SearchableListBase`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableListBase`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableListBase`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.SearchableListBase`1.Capacity">
            <summary>
            Gets or sets the amount of items the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableListBase`1"/> can hold without resizing itself.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.SearchableReadOnlyCollectionBase`1">
            <summary>
            Represents a strongly typed collection of objects, which can be searched. 
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyCollectionBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableReadOnlyCollectionBase`1"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyCollectionBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableReadOnlyCollectionBase`1"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyCollectionBase`1.Exists(System.Func{`0,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyCollectionBase`1.Find(System.Func{`0,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyCollectionBase`1.FindAll(System.Func{`0,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyCollectionBase`1.FindExcept(System.Func{`0,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyCollectionBase`1.FindLast(System.Func{`0,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.SearchableReadOnlyListBase`1">
            <summary>
            Represents a strongly typed list of objects, which can be accessed by index and searched. 
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyListBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableReadOnlyListBase`1"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyListBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.SearchableReadOnlyListBase`1"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyListBase`1.Exists(System.Func{`0,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyListBase`1.Find(System.Func{`0,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyListBase`1.FindAll(System.Func{`0,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyListBase`1.FindExcept(System.Func{`0,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyListBase`1.FindLast(System.Func{`0,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyListBase`1.BinarySearch(`0@)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyListBase`1.BinarySearch(`0@,System.Collections.Generic.IComparer{`0})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyListBase`1.BinarySearch(System.Int32@,System.Int32@,`0@,System.Collections.Generic.IComparer{`0})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyListBase`1.FindIndex(System.Func{`0,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyListBase`1.FindIndex(System.Int32@,System.Int32@,System.Func{`0,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyListBase`1.FindLastIndex(System.Func{`0,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyListBase`1.FindLastIndex(System.Int32@,System.Int32@,System.Func{`0,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SearchableReadOnlyListBase`1.LastIndexOf(`0@)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.Enumerable">
            <summary>
            Extends the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsIReadOnlyCollection2``1(System.Collections.ObjectModel.Collection{``0})">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsIReadOnlyCollection2``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsIReadOnlyCollection2``1(System.Collections.Generic.List{``0})">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsIReadOnlyCollection2``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsIReadOnlyCollection2``1(System.Collections.ObjectModel.ReadOnlyCollection{``0})">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsIReadOnlyCollection2``1(System.Collections.Generic.SortedSet{``0})">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsIReadOnlyCollection2``1(System.Collections.Generic.Stack{``0})">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsIReadOnlyList2``1(System.Collections.ObjectModel.Collection{``0})">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsIReadOnlyList2``1(System.Collections.Generic.List{``0})">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsIReadOnlyList2``1(System.Collections.ObjectModel.ReadOnlyCollection{``0})">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.MoveItem``1(System.Collections.Generic.IList{``0},System.Int32,Narumikazuchi.Collections.ItemMoveDirection)">
            <summary>
            Moves the item at the given index one position in the specified direction in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.MoveItem``1(System.Collections.Generic.IList{``0},System.Int32,Narumikazuchi.Collections.ItemMoveDirection,System.Int32)">
            <summary>
            Moves the item at the given index the given amount of positions in the specified direction in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.MoveItem``1(System.Collections.Generic.IList{``0},``0,Narumikazuchi.Collections.ItemMoveDirection)">
            <summary>
            Moves the item one position in the specified direction in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.MoveItem``1(System.Collections.Generic.IList{``0},``0,Narumikazuchi.Collections.ItemMoveDirection,System.Int32)">
            <summary>
            Moves the item at the given index the given amount of positions in the specified direction in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IAutoSortable`1">
            <summary>
            Represents an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that can be automatically sorted upon collection change.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IAutoSortable`1.EnableAutoSort(Narumikazuchi.Collections.SortDirection)">
            <summary>
            Enables automatic sorting for this object.
            </summary>
            <param name="direction">The <see cref="T:Narumikazuchi.Collections.SortDirection"/> in which to apply automatic sorting.</param>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IAutoSortable`1.EnableAutoSort(Narumikazuchi.Collections.SortDirection,System.Comparison{`0})">
            <summary>
            Enables automatic sorting for this object.
            </summary>
            <param name="direction">The <see cref="T:Narumikazuchi.Collections.SortDirection"/> in which to apply automatic sorting.</param>
            <param name="comparison">The comparision to use for the sorting process.</param>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IAutoSortable`1.EnableAutoSort(Narumikazuchi.Collections.SortDirection,System.Collections.Generic.IComparer{`0})">
            <summary>
            Enables automatic sorting for this object.
            </summary>
            <param name="direction">The <see cref="T:Narumikazuchi.Collections.SortDirection"/> in which to apply automatic sorting.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to use for the sorting process.</param>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IAutoSortable`1.DisableAutoSort">
            <summary>
            Disables automatic sorting for this object.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.IAutoSortable`1.AutoSort">
            <summary>
            Gets if the contents of this object should be automatically sorted upon change.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IFilterable`1">
            <summary>
            Represents a collection that can be filtered.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IFilterable`1.Filter(System.Func{`0,System.Boolean})">
            <summary>
            Filters the <see cref="T:Narumikazuchi.Collections.Abstract.IFilterable`1"/> through the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter the collection by.</param>
            <returns><see langword="true"/> if the filtering succeeded, else <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IFilterable`1.ResetFilter">
            <summary>
            Resets the filtering for the <see cref="T:Narumikazuchi.Collections.Abstract.IFilterable`1"/>.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.IFilterable`1.IsFiltered">
            <summary>
            Gets if the <see cref="T:Narumikazuchi.Collections.Abstract.IFilterable`1"/> is currently filtered.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1">
            <summary>
            Represents a strongly-typed, read-only collection of elements.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1"/>.</param>
            <returns><see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1"/>; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1"/>.
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__CollectionICollectionWrapper`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__CollectionICollectionWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__CollectionICollectionWrapper`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__CollectionICollectionWrapper`1.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__CollectionICollectionWrapper`1.CopyTo(`1[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__LinkedListICollectionWrapper`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__LinkedListICollectionWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__LinkedListICollectionWrapper`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__LinkedListICollectionWrapper`1.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__LinkedListICollectionWrapper`1.CopyTo(`1[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__ListICollectionWrapper`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__ListICollectionWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__ListICollectionWrapper`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__ListICollectionWrapper`1.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__ListICollectionWrapper`1.CopyTo(`1[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__QueueICollectionWrapper`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__QueueICollectionWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__QueueICollectionWrapper`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__QueueICollectionWrapper`1.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__QueueICollectionWrapper`1.CopyTo(`1[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__ReadOnlyCollectionICollectionWrapper`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__ReadOnlyCollectionICollectionWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__ReadOnlyCollectionICollectionWrapper`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__ReadOnlyCollectionICollectionWrapper`1.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__ReadOnlyCollectionICollectionWrapper`1.CopyTo(`1[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__SortedSetICollectionWrapper`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__SortedSetICollectionWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__SortedSetICollectionWrapper`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__SortedSetICollectionWrapper`1.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__SortedSetICollectionWrapper`1.CopyTo(`1[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__StackICollectionWrapper`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__StackICollectionWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__StackICollectionWrapper`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__StackICollectionWrapper`1.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyCollection2`1.__StackICollectionWrapper`1.CopyTo(`1[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1">
            <summary>
            Represents a read-only collection of elements that can be accessed by index.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific tem in the <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1"/>; otherwise, -1</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__CollectionIListWrapper`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__CollectionIListWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__CollectionIListWrapper`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__CollectionIListWrapper`1.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__CollectionIListWrapper`1.CopyTo(`1[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__CollectionIListWrapper`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__CollectionIListWrapper`1.IndexOf(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__ListIListWrapper`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__ListIListWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__ListIListWrapper`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__ListIListWrapper`1.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__ListIListWrapper`1.CopyTo(`1[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__ListIListWrapper`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__ListIListWrapper`1.IndexOf(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__ReadOnlyCollectionIListWrapper`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__ReadOnlyCollectionIListWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__ReadOnlyCollectionIListWrapper`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__ReadOnlyCollectionIListWrapper`1.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__ReadOnlyCollectionIListWrapper`1.CopyTo(`1[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__ReadOnlyCollectionIListWrapper`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1.__ReadOnlyCollectionIListWrapper`1.IndexOf(`1)">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.ISearchableCollection`1">
            <summary>
            Represents a strongly-typed collection that can be searched through.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ISearchableCollection`1.Exists(System.Func{`0,System.Boolean})">
            <summary>
            Determines if the <see cref="T:Narumikazuchi.Collections.Abstract.ISearchableCollection`1"/> contains item matching the specified condition.
            </summary>
            <param name="predicate">The condition to check items against.</param>
            <returns><see langword="true"/> if at least one item matching the condition exists in this list; else <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ISearchableCollection`1.Find(System.Func{`0,System.Boolean})">
            <summary>
            Searches the <see cref="T:Narumikazuchi.Collections.Abstract.ISearchableCollection`1"/> for an item matching the specified condition and
            returns the first occurence of a matching item.
            </summary>
            <param name="predicate">The condition to check items against.</param>
            <returns>The first item matching the condition or <see langword="default"/> if no item in this list matches the condition</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ISearchableCollection`1.FindAll(System.Func{`0,System.Boolean})">
            <summary>
            Retrieves all items in the <see cref="T:Narumikazuchi.Collections.Abstract.ISearchableCollection`1"/> that match the specified condition.
            </summary>
            <param name="predicate">The condition to check items against.</param>
            <returns>An <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1"/> containing all items matching the condition</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ISearchableCollection`1.FindExcept(System.Func{`0,System.Boolean})">
            <summary>
            Retrieves all items in the <see cref="T:Narumikazuchi.Collections.Abstract.ISearchableCollection`1"/> that do not match the specified condition.
            </summary>
            <param name="predicate">The condition to check items against.</param>
            <returns>An <see cref="T:Narumikazuchi.Collections.Abstract.IReadOnlyList2`1"/> containing all items not matching the condition</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ISearchableCollection`1.FindLast(System.Func{`0,System.Boolean})">
            <summary>
            Searches the <see cref="T:Narumikazuchi.Collections.Abstract.ISearchableCollection`1"/> for an item matching the specified condition and
            returns the last occurence of a matching item.
            </summary>
            <param name="predicate">The condition to check items against.</param>
            <returns>The last item matching the condition or <see langword="default"/> if no item in this list matches the condition</returns>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.ISearchableList`1">
            <summary>
            Represents a strongly-typed, index-accessible collection that can be searched through.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ISearchableList`1.BinarySearch(`0@)">
            <summary>
            Searches the sorted <see cref="T:Narumikazuchi.Collections.Abstract.ISearchableList`1"/> for the specified item in the entire <see cref="T:Narumikazuchi.Collections.Abstract.ISearchableList`1"/>.
            </summary>
            <remarks>
            If the <see cref="T:Narumikazuchi.Collections.Abstract.ISearchableList`1"/> is not previously sorted, this method will sort it before searching.
            </remarks>
            <param name="item">The item to search.</param>
            <returns>The zero-based index of the item or -1 if the list doesn't contain the item</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ISearchableList`1.BinarySearch(`0@,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the sorted <see cref="T:Narumikazuchi.Collections.Abstract.ISearchableList`1"/> for the specified item using the specified <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <param name="item">The item to search.</param>
            <param name="comparer">The comparer to determine a match.</param>
            <returns>The zero-based index of the item or -1 if the list doesn't contain the item</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ISearchableList`1.BinarySearch(System.Int32@,System.Int32@,`0@,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the sorted <see cref="T:Narumikazuchi.Collections.Abstract.ISearchableList`1"/> for the specified item in the specified range using the
            specified <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <remarks>
            If the <see cref="T:Narumikazuchi.Collections.Abstract.ISearchableList`1"/> is not previously sorted, this method will sort it before searching.
            </remarks>
            <param name="index">The index of the first item in the range.</param>
            <param name="count">The length of the range.</param>
            <param name="item">The item to search.</param>
            <param name="comparer">The comparer to determine a match.</param>
            <returns>The zero-based index of the item or -1 if the list doesn't contain the item</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ISearchableList`1.FindIndex(System.Func{`0,System.Boolean})">
            <summary>
            Searches the entire <see cref="T:Narumikazuchi.Collections.Abstract.ISearchableList`1"/> for an item matching the specified condition and
            returns the index of the first occurence of a matching item.
            </summary>
            <param name="predicate">The condition to check items against.</param>
            <returns>The index of the first item matching the condition or -1 if no item in this list matches the condition</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ISearchableList`1.FindIndex(System.Int32@,System.Int32@,System.Func{`0,System.Boolean})">
            <summary>
            Searches the specified range in the <see cref="T:Narumikazuchi.Collections.Abstract.ISearchableList`1"/> for an item matching the specified condition and
            returns the index of the first occurence of a matching item.
            </summary>
            <param name="startIndex">The index of the first item in the range.</param>
            <param name="count">The length of the range to search.</param>
            <param name="predicate">The condition to check items against.</param>
            <returns>The index of the first item matching the condition or -1 if no item in this list matches the condition</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ISearchableList`1.FindLastIndex(System.Func{`0,System.Boolean})">
            <summary>
            Searches the entire <see cref="T:Narumikazuchi.Collections.Abstract.ISearchableList`1"/> for an item matching the specified condition and
            returns the index of the last occurence of a matching item.
            </summary>
            <param name="predicate">The condition to check items against.</param>
            <returns>The index of the last item matching the condition or -1 if no item in this list matches the condition</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ISearchableList`1.FindLastIndex(System.Int32@,System.Int32@,System.Func{`0,System.Boolean})">
            <summary>
            Searches the specified range in the <see cref="T:Narumikazuchi.Collections.Abstract.ISearchableList`1"/> for an item matching the specified condition and
            returns the index of the last occurence of a matching item.
            </summary>
            <param name="startIndex">The index of the first item in the range.</param>
            <param name="count">The length of the range to search.</param>
            <param name="predicate">The condition to check items against.</param>
            <returns>The index of the last item matching the condition or -1 if no item in this list matches the condition</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ISearchableList`1.LastIndexOf(`0@)">
            <summary>
            Searches for the specified item and returns the index of the last occurence in the <see cref="T:Narumikazuchi.Collections.Abstract.ISearchableList`1"/>.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>The index of the last occurence of the specified item or -1 if the item does not exist in the list</returns>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.ISortable`1">
            <summary>
            Represents an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that can be sorted.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ISortable`1.Sort(Narumikazuchi.Collections.SortDirection)">
            <summary>
            Sorts the contents of this object in the specifiedorder.
            </summary>
            <param name="direction">The <see cref="T:Narumikazuchi.Collections.SortDirection"/> in which to sort the contents of this object.</param>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ISortable`1.Sort(Narumikazuchi.Collections.SortDirection,System.Comparison{`0})">
            <summary>
            Sorts the contents of this object in the specified order using the specified comparision.
            </summary>
            <param name="direction">The <see cref="T:Narumikazuchi.Collections.SortDirection"/> in which to sort the contents of this object.</param>
            <param name="comparison">The comparision to use for the sorting process.</param>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ISortable`1.Sort(Narumikazuchi.Collections.SortDirection,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the contents of this object in the specified order using the specified comparer.
            </summary>
            <param name="direction">The <see cref="T:Narumikazuchi.Collections.SortDirection"/> in which to sort the contents of this object.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to use for the sorting process.</param>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.ISortable`1.IsSorted">
            <summary>
            Gets if the object is currently sorted.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.ISortable`1.SortDirection">
            <summary>
            Gets the direction this collection is sorted in.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.ItemMoveDirection">
            <summary>
            Specifies in which direction an item inside a list can be moved.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.SortDirection">
            <summary>
            Defines the direction in which an <see cref="!:ISortable"/> is sorted.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.SortDirection.NotSorted">
            <summary>
            The <see cref="!:ISortable"/> is not sorted.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.SortDirection.Ascending">
            <summary>
            The <see cref="!:ISortable"/> is sorted in ascending order.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.SortDirection.Descending">
            <summary>
            The <see cref="!:ISortable"/> is sorted in descending order.
            </summary>
        </member>
    </members>
</doc>
