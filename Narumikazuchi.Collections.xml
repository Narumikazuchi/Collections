<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Narumikazuchi.Collections.Abstract</name>
    </assembly>
    <members>
        <member name="T:Narumikazuchi.Collections.Abstract.CollectionBase`2">
            <summary>
            Represents a strongly typed collection of objects. 
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.CollectionBase`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`2.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:Narumikazuchi.Collections.Abstract.CollectionBase`2"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.CollectionBase`2"/> class having the specified collection of items.
            </summary>
            <param name="collection">The initial collection of items in this list.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`2.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.CollectionBase`2"/> class having the specified collection of items.
            </summary>
            <param name="collection">The initial collection of items in this list.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`2.#ctor(System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.CollectionBase`2"/> class having the specified collection of items.
            </summary>
            <param name="collection">The initial collection of items in this list.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="F:Narumikazuchi.Collections.Abstract.CollectionBase`2.COLLECTION_IS_READONLY">
            <summary>
            Error message, when trying to write to a readonly list.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`2.Clear">
            <inheritdoc />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`2.Remove(`1)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`2.RemoveAll(System.Func{`1,System.Boolean})">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IndexOutOfRangeException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`2.Insert(`0@,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`2.InsertRange(`0@,System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.CollectionBase`2.RemoveAt(`0@)">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.FastCollectionBase`2">
            <summary>
            Represents a collection which occupies more memory in favor of speed.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.GetKeysFirstToLast">
            <summary>
            Returns an iterator for this collection, which iterates from the first key to the last.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.GetKeysLastToFirst">
            <summary>
            Returns an iterator for this collection, which iterates from the last key to the first.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.GetValuesFirstToLast">
            <summary>
            Returns an iterator for this collection, which iterates from the first value to the last.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.GetValuesLastToFirst">
            <summary>
            Returns an iterator for this collection, which iterates from the last value to the first.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.GetKeyValuePairsFirstToLast">
            <summary>
            Returns an iterator for this collection, which iterates from the first key-value-pair to the last.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.GetKeyValuePairsLastToFirst">
            <summary>
            Returns an iterator for this collection, which iterates from the last key-value-pair to the first.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.AppendInternal(`1)">
            <summary>
            Appends the specified item at the end of the collection.
            </summary>
            <param name="item">The item to append.</param>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.ClearInternal">
            <summary>
            Clears the entire collection of all items.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.InsertInternal(`0@,`1)">
            <summary>
            Adds the specified item at the specified index.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.RemoveInternal(`1)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns><see langword="true"/> if the specified item was removed successfully; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.RemoveAtInternal(`0@)">
            <summary>
            Removes the item with the specified index from the collection.
            </summary>
            <param name="index">The index of the item to remove.</param>
            <returns><see langword="true"/> if the specified item was removed successfully; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.EnsureCapacity(System.Int32@)">
            <summary>
            Ensures that the collection can hold the specified amount of items.
            </summary>
            <param name="capacity">The amount of items that need space.</param>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.Version">
            <summary>
            Gets or sets the current version of the collection.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.Abstract.FastCollectionBase`2._count">
            <summary>
            Represents the amount of items currently present in the collection.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.DEFAULTCAPACITY">
            <summary>
            Represents the default capacity for a new <see cref="!:ArrayBasedCollection&lt;T&gt;"/>.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.MAXARRAYSIZE">
            <summary>
            Represents the max. size to which the internal array can expand to.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.SIZE_IS_FIXED">
            <summary>
            Error message, when trying to change _item size while <see cref="P:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.IsFixedSize"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.COLLECTION_CHANGED">
            <summary>
            Error message, when the amount of items in the collection have changed during enumeration.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.IndexOf(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.LastIndexOf(`1)">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.FastCollectionBase`2.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2">
            <summary>
            Represents a strongly typed collection of objects. 
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.IsReadOnly">
            <summary>
            Gets whether this collection can be edited.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.#ctor(System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="F:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.MULTI_DIMENSIONAL_ARRAYS">
            <summary>
            Error message, when trying to copy this collection to a multidimensional array.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.ARRAY_TYPE_MISMATCH">
            <summary>
            Error message, when trying to copy this collection to a multidimensional array.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.INDEX_LESS_THAN_ZERO">
            <summary>
            Error message, when trying to copy this collection to a multidimensional array.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.ConvertAll``1(System.Converter{`1,``0})">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.CopyTo(`1[],System.Int32@)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.ForEach(System.Action{`1})">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.GetRange(`0@,`0@)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.Exists(System.Func{`1,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.Find(System.Func{`1,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.FindAll(System.Func{`1,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.FindExcept(System.Func{`1,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.FindLast(System.Func{`1,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.FindIndex(System.Func{`1,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.FindIndex(`0@,`0@,System.Func{`1,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.FindLastIndex(System.Func{`1,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlyCollectionBase`2.FindLastIndex(`0@,`0@,System.Func{`1,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2">
            <summary>
            Represents a strongly typed immutable collection where every object is only contained once. The procedure to check whether the object is already in the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2"/> can be specified
            with a corresponding <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> object or a <see cref="T:Narumikazuchi.EqualityComparison`1"/> delegate.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2.Comparer">
            <summary>
            Gets or sets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2"/> uses for duplicate-checks.
            </summary>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},Narumikazuchi.EqualityComparison{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <param name="comparison">The delegate that is used to compare two instances of <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <param name="comparer">The comparer that is used to compare two instances of <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}},Narumikazuchi.EqualityComparison{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <param name="comparison">The delegate that is used to compare two instances of <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <param name="comparer">The comparer that is used to compare two instances of <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2.#ctor(System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2.#ctor(System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}},Narumikazuchi.EqualityComparison{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <param name="comparison">The delegate that is used to compare two instances of <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2.#ctor(System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <param name="comparer">The comparer that is used to compare two instances of <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2.FindInOther(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Attempts to find all of the items in this collection in the specified other enumerable.
            </summary>
            <param name="other">The enumerable to search through.</param>
            <returns><see langword="true"/> if all of the items of this collection are also present in the enumerable; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2.IsSubsetOf(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2.IsSupersetOf(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2.Overlaps(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2.SetEquals(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.SetBase`2">
            <summary>
            Represents a strongly typed collection where every object is only contained once. The procedure to check whether the object is already in the <see cref="T:Narumikazuchi.Collections.Abstract.SetBase`2"/> can be specified
            with a corresponding <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> object or a <see cref="T:Narumikazuchi.EqualityComparison`1"/> delegate.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.SetBase`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SetBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.SetBase`2"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SetBase`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.SetBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SetBase`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},Narumikazuchi.EqualityComparison{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.SetBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <param name="comparison">The delegate that is used to compare two instances of <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SetBase`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.SetBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <param name="comparer">The comparer that is used to compare two instances of <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SetBase`2.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.SetBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SetBase`2.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}},Narumikazuchi.EqualityComparison{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.SetBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <param name="comparison">The delegate that is used to compare two instances of <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SetBase`2.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.SetBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <param name="comparer">The comparer that is used to compare two instances of <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SetBase`2.#ctor(System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.SetBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SetBase`2.#ctor(System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}},Narumikazuchi.EqualityComparison{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.ReadOnlySetBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <param name="comparison">The delegate that is used to compare two instances of <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SetBase`2.#ctor(System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.Abstract.SetBase`2"/> class containing the specified collection of items.
            </summary>
            <param name="collection">The collection of items in this list.</param>
            <param name="comparer">The comparer that is used to compare two instances of <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="F:Narumikazuchi.Collections.Abstract.SetBase`2.COLLECTION_IS_READONLY">
            <summary>
            Error message, when trying to write to a readonly list.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SetBase`2.Add(`1)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:Narumikazuchi.NotAllowed"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SetBase`2.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SetBase`2.Clear">
            <inheritdoc/>
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SetBase`2.Remove(`1)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SetBase`2.RemoveAll(System.Func{`1,System.Boolean})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IndexOutOfRangeException" />
            <exception cref="T:Narumikazuchi.NotAllowed" />
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SetBase`2.ExceptWith(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SetBase`2.IntersectWith(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SetBase`2.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.SetBase`2.UnionWith(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.Enumerable">
            <summary>
            Extends the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsContentAddable``2(``0)">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsContentClearable``2(``0)">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsContentConvertable``2(``0)">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsContentCopyable``2(``0)">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsContentForEach``2(``0)">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsContentRemovable``2(``0)">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsConvertToArray``2(``0)">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsElementContainer``2(``0)">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsGenericElementContainer``2(``0)">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsElementFinder``2(``0)">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsContentIndexRemovable``2(``0)">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsContentInsertable``2(``0)">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsGenericContentInsertable``2(``0)">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsContentSegmentable``2(``0)">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsIndexedReadOnlyCollection``2(``0)">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsGenericIndexedReadOnlyCollection``2(``0)">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.Enumerable.AsIndexFinder``2(``0)">
            <summary>
            Represents this object as the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer`1"/> interface.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IElementContainer">
            <summary>
            Represents a strongly-typed, read-only collection of elements.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IElementContainer.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer"/>.</param>
            <returns><see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer"/>; otherwise, <see langword="false"/></returns>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IElementContainer`1">
            <summary>
            Represents a strongly-typed, read-only collection of elements.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IElementContainer`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer`1"/>.</param>
            <returns><see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:Narumikazuchi.Collections.Abstract.IElementContainer`1"/>; otherwise, <see langword="false"/></returns>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`1">
            <summary>
            Represents a read-only collection of elements that can be accessed by index.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`1.IndexOf(System.Object)">
            <summary>
            Determines the index of the first occurrence of a specific item in the <see cref="T:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`1"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the <see cref="T:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`1"/></returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`1.LastIndexOf(System.Object)">
            <summary>
            Determines the index of the last occurrence of a specific item in the <see cref="T:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`1"/>.</param>
            <returns>The last index of <paramref name="item"/> if found in the <see cref="T:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`1"/></returns>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`1.Item(`0)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The index of the lement to get.</param>
            <returns>The element at the specified index</returns>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`2">
            <summary>
            Represents a read-only collection of elements that can be accessed by index.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`2.IndexOf(`1)">
            <summary>
            Determines the index of the first occurrence a specific tem in the <see cref="T:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`2"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`2"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the <see cref="T:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`2"/></returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`2.LastIndexOf(`1)">
            <summary>
            Determines the index of the last occurrence of a specific item in the <see cref="T:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`1"/>.</param>
            <returns>The last index of <paramref name="item"/> if found in the <see cref="T:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`1"/></returns>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`2.Item(`0)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The index of the lement to get.</param>
            <returns>The element at the specified index</returns>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IAutoSortable`1">
            <summary>
            Represents an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that can be automatically sorted upon collection change.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IAutoSortable`1.EnableAutoSort(Narumikazuchi.Collections.SortDirection@)">
            <summary>
            Enables automatic sorting for this object.
            </summary>
            <param name="direction">The <see cref="T:Narumikazuchi.Collections.SortDirection"/> in which to apply automatic sorting.</param>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IAutoSortable`1.EnableAutoSort(Narumikazuchi.Collections.SortDirection@,System.Comparison{`0})">
            <summary>
            Enables automatic sorting for this object.
            </summary>
            <param name="direction">The <see cref="T:Narumikazuchi.Collections.SortDirection"/> in which to apply automatic sorting.</param>
            <param name="comparison">The comparision to use for the sorting process.</param>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IAutoSortable`1.EnableAutoSort(Narumikazuchi.Collections.SortDirection@,System.Collections.Generic.IComparer{`0})">
            <summary>
            Enables automatic sorting for this object.
            </summary>
            <param name="direction">The <see cref="T:Narumikazuchi.Collections.SortDirection"/> in which to apply automatic sorting.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to use for the sorting process.</param>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IAutoSortable`1.DisableAutoSort">
            <summary>
            Disables automatic sorting for this object.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.IAutoSortable`1.AutoSort">
            <summary>
            Gets if the contents of this object should be automatically sorted upon change.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.ICollectionImmutability">
            <summary>
            Expresses the immutability of the capacity of a collection.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.ICollectionImmutability.IsFixedSize">
            <summary>
            Gets whether the capacity of this <see cref="T:Narumikazuchi.Collections.Abstract.ICollectionImmutability"/> can be edited.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IContentAddable`1">
            <summary>
            Represents a collection which allows the addition of items to itself.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IContentAddable`1.Add(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:Narumikazuchi.Collections.Abstract.IContentAddable`1"/>.
            </summary>
            <param name="item">The object to be added to the end of the <see cref="T:Narumikazuchi.Collections.Abstract.IContentAddable`1"/>. 
            The value can be <see langword="null"/> for reference types.</param>
            <returns><see langword="true"/> if the item was added; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IContentAddable`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:Narumikazuchi.Collections.Abstract.IContentAddable`1"/>.
            </summary>
            <param name="collection">The collection of items to add.</param>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IContentClearable">
            <summary>
            Represents a collection which allows the removal of every item from itself.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IContentClearable.Clear">
            <summary>
            Removes all elements from the <see cref="T:Narumikazuchi.Collections.Abstract.IContentClearable"/>.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IContentConvertable`1">
            <summary>
            Allows the conversion of all items in the collection into a different type.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IContentConvertable`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts all elements in the <see cref="T:Narumikazuchi.Collections.Abstract.IContentConvertable`1"/> into another type and returns an <see cref="T:System.Collections.Generic.ICollection`1"/>
            containing the converted objects.
            </summary>
            <param name="converter">A delegate which converts every item into the new type.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> which contains the converted objects</returns>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IContentCopyable`2">
            <summary>
            Allows the content of a collection to be copied over to an array of type <typeparamref name="TArray"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IContentCopyable`2.CopyTo(`1,`0@)">
            <summary>
            Copies the elements of the <see cref="T:Narumikazuchi.Collections.Abstract.IContentCopyable`2"/> to the specified <typeparamref name="TArray"/> starting at the specified index <typeparamref name="TIndex"/>.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IContentForEach`1">
            <summary>
            Allows the use of an <see cref="T:System.Action`1"/> instead of a <see langword="foreach"/>-block to perform actions on the items of a collection.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IContentForEach`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action for every element of this <see cref="T:Narumikazuchi.Collections.Abstract.IContentForEach`1"/>.
            </summary>
            <param name="action">The action to perform on each item.</param>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IContentIndexRemovable`1">
            <summary>
            Allows the removal of an item by specifying an index instead of the actual item.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IContentIndexRemovable`1.RemoveAt(`0@)">
            <summary>
            Removes the object at the specified index from the <see cref="T:Narumikazuchi.Collections.Abstract.IContentIndexRemovable`1"/>.
            </summary>
            <param name="index">The index of the object to delete.</param>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IContentInsertable`1">
            <summary>
            Allows the emplacement of an item at a specified index instead of the end of a collection.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IContentInsertable`1.Insert(`0@,System.Object)">
            <summary>
            Inserts the specified object into the <see cref="T:Narumikazuchi.Collections.Abstract.IContentInsertable`2"/> at the specified index.
            </summary>
            <param name="index">The index at which to place the object.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IContentInsertable`2">
            <summary>
            Allows the emplacement of an item at a specified index instead of the end of a collection.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IContentInsertable`2.Insert(`0@,`1)">
            <summary>
            Inserts the specified object into the <see cref="T:Narumikazuchi.Collections.Abstract.IContentInsertable`2"/> at the specified index.
            </summary>
            <param name="index">The index at which to place the object.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IContentInsertable`2.InsertRange(`0@,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Inserts the items from the specified collection into this <see cref="T:Narumikazuchi.Collections.Abstract.IContentInsertable`2"/> starting at the specified index.
            </summary>
            <param name="index">The index where to start inserting the new items.</param>
            <param name="collection">The collection of items to insert.</param>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IContentRemovable">
            <summary>
            Represents a collection which allows removal of items from itself.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IContentRemovable.Remove(System.Object)">
            <summary>
            Removes the first occurrence of the specified item from the <see cref="T:Narumikazuchi.Collections.Abstract.IContentRemovable`1"/>.
            </summary>
            <param name="item">The item to remove.</param>
            <returns><see langword="true"/> if the item was found and removed; otherwise, <see langword="false"/></returns>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IContentRemovable`1">
            <summary>
            Represents a collection which allows removal of items from itself.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IContentRemovable`1.RemoveAll(System.Func{`0,System.Boolean})">
            <summary>
            Removes all objects from the <see cref="T:Narumikazuchi.Collections.Abstract.IContentRemovable`1"/> that match the specified condition.
            </summary>
            <param name="predicate">The condition that objects need to meet to be deleted.</param>
            <returns>The amount of items removed</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IContentRemovable`1.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified item from the <see cref="T:Narumikazuchi.Collections.Abstract.IContentRemovable`1"/>.
            </summary>
            <param name="item">The item to remove.</param>
            <returns><see langword="true"/> if the item was found and removed; otherwise, <see langword="false"/></returns>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IContentSegmentable`2">
            <summary>
            Represents the functionality to retrieve only a part of an <see cref="T:System.Collections.IEnumerable"/> that is accessible by index.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IContentSegmentable`2.GetRange(`0@,`0@)">
            <summary>
            Creates a shallow copy of the elements of this <see cref="T:Narumikazuchi.Collections.Abstract.IContentSegmentable`2"/> from the specified range.
            </summary>
            <remarks>
            Both of the elements at <paramref name="startIndex"/> as well as <paramref name="endIndex"/> are included in the result.
            </remarks>
            <param name="startIndex">The index of the first item in the resulting range.</param>
            <param name="endIndex">The index of the last item in the resulting range.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the items from the specified range</returns>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IConvertToArray`1">
            <summary>
            The functionality to copy the contents of this object into an array of type <typeparamref name="TArray"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IConvertToArray`1.ToArray">
            <summary>
            Creates a shallow copy of the contents of this <see cref="T:Narumikazuchi.Collections.Abstract.IConvertToArray`1"/> and returns it as an array.
            </summary>
            <returns>An array containing the same items as this <see cref="T:Narumikazuchi.Collections.Abstract.IConvertToArray`1"/></returns>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IElementFinder`2">
            <summary>
            Represents a strongly-typed collection that can be searched through.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IElementFinder`2.Exists(System.Func{`0,System.Boolean})">
            <summary>
            Determines if the <see cref="T:Narumikazuchi.Collections.Abstract.IElementFinder`2"/> contains item matching the specified condition.
            </summary>
            <param name="predicate">The condition to check items against.</param>
            <returns><see langword="true"/> if at least one item matching the condition exists in this list; else <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IElementFinder`2.Find(System.Func{`0,System.Boolean})">
            <summary>
            Searches the <see cref="T:Narumikazuchi.Collections.Abstract.IElementFinder`2"/> for an item matching the specified condition and
            returns the first occurence of a matching item.
            </summary>
            <param name="predicate">The condition to check items against.</param>
            <returns>The first item matching the condition or <see langword="default"/> if no item in this list matches the condition</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IElementFinder`2.FindAll(System.Func{`0,System.Boolean})">
            <summary>
            Retrieves all items in the <see cref="T:Narumikazuchi.Collections.Abstract.IElementFinder`2"/> that match the specified condition.
            </summary>
            <param name="predicate">The condition to check items against.</param>
            <returns>An <see cref="T:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`1"/> containing all items matching the condition</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IElementFinder`2.FindExcept(System.Func{`0,System.Boolean})">
            <summary>
            Retrieves all items in the <see cref="T:Narumikazuchi.Collections.Abstract.IElementFinder`2"/> that do not match the specified condition.
            </summary>
            <param name="predicate">The condition to check items against.</param>
            <returns>An <see cref="T:Narumikazuchi.Collections.Abstract.IIndexedReadOnlyCollection`1"/> containing all items not matching the condition</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IElementFinder`2.FindLast(System.Func{`0,System.Boolean})">
            <summary>
            Searches the <see cref="T:Narumikazuchi.Collections.Abstract.IElementFinder`2"/> for an item matching the specified condition and
            returns the last occurence of a matching item.
            </summary>
            <param name="predicate">The condition to check items against.</param>
            <returns>The last item matching the condition or <see langword="default"/> if no item in this list matches the condition</returns>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IFilterable`1">
            <summary>
            Represents a collection that can be filtered.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IFilterable`1.Filter(System.Func{`0,System.Boolean})">
            <summary>
            Filters the <see cref="T:Narumikazuchi.Collections.Abstract.IFilterable`1"/> through the specified predicate.
            </summary>
            <param name="predicate">The predicate to filter the collection by.</param>
            <returns><see langword="true"/> if the filtering succeeded, else <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IFilterable`1.ResetFilter">
            <summary>
            Resets the filtering for the <see cref="T:Narumikazuchi.Collections.Abstract.IFilterable`1"/>.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.IFilterable`1.IsFiltered">
            <summary>
            Gets if the <see cref="T:Narumikazuchi.Collections.Abstract.IFilterable`1"/> is currently filtered.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.IIndexFinder`2">
            <summary>
            Represents a strongly-typed, index-accessible collection that can be searched through.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IIndexFinder`2.FindIndex(System.Func{`1,System.Boolean})">
            <summary>
            Searches the entire <see cref="T:Narumikazuchi.Collections.Abstract.IIndexFinder`2"/> for an item matching the specified condition and
            returns the index of the first occurence of a matching item.
            </summary>
            <param name="predicate">The condition to check items against.</param>
            <returns>The index of the first item matching the condition or -1 if no item in this list matches the condition</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IIndexFinder`2.FindIndex(`0@,`0@,System.Func{`1,System.Boolean})">
            <summary>
            Searches the specified range in the <see cref="T:Narumikazuchi.Collections.Abstract.IIndexFinder`2"/> for an item matching the specified condition and
            returns the index of the first occurence of a matching item.
            </summary>
            <param name="startIndex">The index of the first item in the range.</param>
            <param name="endIndex">The index of the last item in the range.</param>
            <param name="predicate">The condition to check items against.</param>
            <returns>The index of the first item matching the condition or -1 if no item in this list matches the condition</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IIndexFinder`2.FindLastIndex(System.Func{`1,System.Boolean})">
            <summary>
            Searches the entire <see cref="T:Narumikazuchi.Collections.Abstract.IIndexFinder`2"/> for an item matching the specified condition and
            returns the index of the last occurence of a matching item.
            </summary>
            <param name="predicate">The condition to check items against.</param>
            <returns>The index of the last item matching the condition or -1 if no item in this list matches the condition</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.IIndexFinder`2.FindLastIndex(`0@,`0@,System.Func{`1,System.Boolean})">
            <summary>
            Searches the specified range in the <see cref="T:Narumikazuchi.Collections.Abstract.IIndexFinder`2"/> for an item matching the specified condition and
            returns the index of the last occurence of a matching item.
            </summary>
            <param name="startIndex">The index of the first item in the range.</param>
            <param name="endIndex">The index of the last item in the range.</param>
            <param name="predicate">The condition to check items against.</param>
            <returns>The index of the last item matching the condition or -1 if no item in this list matches the condition</returns>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.ISortable`1">
            <summary>
            Represents an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that can be sorted.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ISortable`1.Sort(Narumikazuchi.Collections.SortDirection@)">
            <summary>
            Sorts the contents of this object in the specifiedorder.
            </summary>
            <param name="direction">The <see cref="T:Narumikazuchi.Collections.SortDirection"/> in which to sort the contents of this object.</param>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ISortable`1.Sort(Narumikazuchi.Collections.SortDirection@,System.Comparison{`0})">
            <summary>
            Sorts the contents of this object in the specified order using the specified comparision.
            </summary>
            <param name="direction">The <see cref="T:Narumikazuchi.Collections.SortDirection"/> in which to sort the contents of this object.</param>
            <param name="comparison">The comparision to use for the sorting process.</param>
        </member>
        <member name="M:Narumikazuchi.Collections.Abstract.ISortable`1.Sort(Narumikazuchi.Collections.SortDirection@,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the contents of this object in the specified order using the specified comparer.
            </summary>
            <param name="direction">The <see cref="T:Narumikazuchi.Collections.SortDirection"/> in which to sort the contents of this object.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to use for the sorting process.</param>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.ISortable`1.IsSorted">
            <summary>
            Gets if the object is currently sorted.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.ISortable`1.SortDirection">
            <summary>
            Gets the direction this collection is sorted in.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.Abstract.ISynchronized">
            <summary>
            Represents an object that is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.ISynchronized.IsSynchronized">
            <summary>
            Gets a value indicating whether access to this <see cref="T:Narumikazuchi.Collections.Abstract.ISynchronized"/> is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.Abstract.ISynchronized.SyncRoot">
            <summary>
            Gets the object mutex used to synchronize access to this <see cref="T:Narumikazuchi.Collections.Abstract.ISynchronized"/>.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.ItemMoveDirection">
            <summary>
            Specifies in which direction an item inside a list can be moved.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.SortDirection">
            <summary>
            Defines the direction in which an <see cref="T:Narumikazuchi.Collections.Abstract.ISortable`1"/> is sorted.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.SortDirection.NotSorted">
            <summary>
            The <see cref="T:Narumikazuchi.Collections.Abstract.ISortable`1"/> is not sorted.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.SortDirection.Ascending">
            <summary>
            The <see cref="T:Narumikazuchi.Collections.Abstract.ISortable`1"/> is sorted in ascending order.
            </summary>
        </member>
        <member name="F:Narumikazuchi.Collections.SortDirection.Descending">
            <summary>
            The <see cref="T:Narumikazuchi.Collections.Abstract.ISortable`1"/> is sorted in descending order.
            </summary>
        </member>
    </members>
</doc>
