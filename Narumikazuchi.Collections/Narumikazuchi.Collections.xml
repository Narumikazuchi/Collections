<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Narumikazuchi.Collections</name>
    </assembly>
    <members>
        <member name="T:Narumikazuchi.Collections.Extensions.CollectionExtensions">
            <summary>
            Extends the <see cref="T:System.Collections.Generic.ICollection`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.CollectionExtensions.AddRange``2(System.Collections.Generic.ICollection{``1},``0)">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="source"></param>
            <param name="other">The collection to add.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.CollectionExtensions.ConvertAll``2(System.Collections.Generic.ICollection{``0},System.Converter{``0,``1})">
            <summary>
            Converts the elements in the current <see cref="T:System.Collections.Generic.ICollection`1"/> to another type, and returns a list containing the converted elements.
            </summary>
            <param name="source"></param>
            <param name="converter">A <see cref="T:System.Converter`2"/> delegate that converts each element from one type to another type.</param>
            <returns>A <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of the target type containing the converted elements from the current <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.CollectionExtensions.Exists``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="source"></param>
            <param name="predicate">The <see cref="T:System.Func`2"/> delegate that defines the conditions of the elements to search for.</param>
            <returns><see langword="true"/> if the <see cref="T:System.Collections.Generic.ICollection`1"/> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.CollectionExtensions.FindAll``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="source"></param>
            <param name="predicate">The <see cref="T:System.Func`2"/> delegate that defines the conditions of the elements to search for.</param>
            <returns>A <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.CollectionExtensions.ForEach``1(System.Collections.Generic.ICollection{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="source"></param>
            <param name="action">The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.CollectionExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="source"></param>
            <param name="predicate">The <see cref="T:System.Func`2"/> delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.CollectionExtensions.TrueForAll``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether every element in the <see cref="T:System.Collections.Generic.ICollection`1"/> matches the conditions defined by the specified predicate.
            </summary>
            <param name="source"></param>
            <param name="predicate">The <see cref="T:System.Func`2"/> delegate that defines the conditions to check against the elements.</param>
            <returns>
            <see langword="true"/> if every element in the <see cref="T:System.Collections.Generic.ICollection`1"/> matches the conditions
            defined by the specified predicate; otherwise, <see langword="false"/>. If the collection has no elements,
            the return value is <see langword="true"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:Narumikazuchi.Collections.Extensions.EnumerableExtensions">
            <summary>
            Extends the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.EnumerableExtensions.AsReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a read-only <see cref="T:Narumikazuchi.Collections.ReadOnlyCollection`1"/> wrapper for the current collection.
            </summary>
            <returns>An object that contains the objects of the source and is read-only.</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.EnumerableExtensions.AsReadOnlyDictionary``3(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},``2)">
            <summary>
            Returns a read-only <see cref="T:Narumikazuchi.Collections.ReadOnlyDictionary`3"/> wrapper for the current collection.
            </summary>
            <returns>An object that contains the objects of the source and is read-only.</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.EnumerableExtensions.AsReadOnlyDictionary``3(System.Collections.Generic.IEnumerable{``0},``2,System.Func{``0,``1})">
            <summary>
            Returns a read-only <see cref="T:Narumikazuchi.Collections.ReadOnlyDictionary`3"/> wrapper for the current collection.
            </summary>
            <returns>An object that contains the objects of the source and is read-only.</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.EnumerableExtensions.AsReadOnlyDictionary``4(System.Collections.Generic.IEnumerable{``0},``3,System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Returns a read-only <see cref="T:Narumikazuchi.Collections.ReadOnlyDictionary`3"/> wrapper for the current collection.
            </summary>
            <returns>An object that contains the objects of the source and is read-only.</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.EnumerableExtensions.AsReadOnlyList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a read-only <see cref="T:Narumikazuchi.Collections.ReadOnlyList`1"/> wrapper for the current list.
            </summary>
            <returns>An object that contains the objects of the source and is read-only.</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.EnumerableExtensions.ToBinaryTree``2(System.Collections.Generic.IEnumerable{``0},``1)">
            <summary>
            Creates a <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.EnumerableExtensions.ToTrie``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a <see cref="T:Narumikazuchi.Collections.Trie`1"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.EnumerableExtensions.Median``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the item <typeparamref name="TElement"/> at the center of the collection.
            </summary>
            <returns>The item <typeparamref name="TElement"/> at the center of the collection</returns>
        </member>
        <member name="T:Narumikazuchi.Collections.Extensions.ListExtensions">
            <summary>
            Extends the <see cref="T:System.Collections.Generic.IList`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Searches the entire sorted <see cref="T:System.Collections.Generic.IList`1"/> for an element using the default comparer and returns the zero-based index of the element.
            </summary>
            <param name="source"></param>
            <param name="item">The object to locate. The value can be <see langword="null"/> for reference types.</param>
            <returns>
            The zero-based index of item the sorted <see cref="T:System.Collections.Generic.IList`1"/>,
            if item is found; otherwise, a negative number that is the bitwise complement
            of the index of the next element that is larger than item or, if there is no
            larger element, the bitwise complement of <see cref="P:System.Collections.Generic.IReadOnlyCollection`1.Count"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.BinarySearch``2(System.Collections.Generic.IList{``0},``0,``1)">
            <summary>
            Searches the entire sorted <see cref="T:System.Collections.Generic.IList`1"/> for an element using the specified comparer and returns the zero-based index of the element.
            </summary>
            <param name="source"></param>
            <param name="item">The object to locate. The value can be <see langword="null"/> for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements. -or- <see langword="null"/> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.</param>
            <returns>
            The zero-based index of item the sorted <see cref="T:System.Collections.Generic.IList`1"/>,
            if item is found; otherwise, a negative number that is the bitwise complement
            of the index of the next element that is larger than item or, if there is no
            larger element, the bitwise complement of <see cref="P:System.Collections.Generic.IReadOnlyCollection`1.Count"/>.</returns>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.BinarySearch``2(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0,``1)">
            <summary>
            Searches the entire sorted <see cref="T:System.Collections.Generic.IList`1"/> for an element using the specified comparer and returns the zero-based index of the element.
            </summary>
            <param name="source"></param>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate. The value can be <see langword="null"/> for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements. -or- <see langword="null"/> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.</param>
            <returns>
            The zero-based index of item the sorted <see cref="T:System.Collections.Generic.IList`1"/>,
            if item is found; otherwise, a negative number that is the bitwise complement
            of the index of the next element that is larger than item or, if there is no
            larger element, the bitwise complement of <see cref="P:System.Collections.Generic.IReadOnlyCollection`1.Count"/>.</returns>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.FindFirstOrDefault``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Searches for the first element that matches the conditions defined by the specified predicate, and returns the first occurrence withthe entire <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="source"></param>
            <param name="predicate">The <see cref="T:System.Func`2"/> delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <typeparamref name="TElement"/>.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.FindFirstIndex``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Searches for the first element that matches the conditions defined by the specified 
            predicate, and returns the zero-based index of the first occurrence withthe
            entire <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="source"></param>
            <param name="predicate">The <see cref="T:System.Func`2"/> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="predicate"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.FindFirstIndex``1(System.Collections.Generic.IList{``0},System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            Searches for the first element that matches the conditions defined by the specified 
            predicate, and returns the zero-based index of the first occurrence withthe
            entire <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="source"></param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="predicate">The <see cref="T:System.Func`2"/> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="predicate"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.FindFirstIndex``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            Searches for the first element that matches the conditions defined by the specified 
            predicate, and returns the zero-based index of the first occurrence withthe
            entire <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="source"></param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements the section to search.</param>
            <param name="predicate">The <see cref="T:System.Func`2"/> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="predicate"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.FindLastOrDefault``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Searches for the last element that matches the conditions defined by the specified predicate, and returns the last occurrence withthe entire <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="source"></param>
            <param name="predicate">The <see cref="T:System.Func`2"/> delegate that defines the conditions of the element to search for.</param>
            <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <typeparamref name="TElement"/>.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.FindLastIndex``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Searches for the last element that matches the conditions defined by the specified 
            predicate, and returns the zero-based index of the last occurrence withthe
            entire <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="source"></param>
            <param name="predicate">The <see cref="T:System.Func`2"/> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="predicate"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.FindLastIndex``1(System.Collections.Generic.IList{``0},System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            Searches for the last element that matches the conditions defined by the specified 
            predicate, and returns the zero-based index of the last occurrence withthe
            entire <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="source"></param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="predicate">The <see cref="T:System.Func`2"/> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="predicate"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.FindLastIndex``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            Searches for the last element that matches the conditions defined by the specified 
            predicate, and returns the zero-based index of the last occurrence withthe
            entire <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="source"></param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements the section to search.</param>
            <param name="predicate">The <see cref="T:System.Func`2"/> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="predicate"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.GetRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements the source <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="source"></param>
            <param name="startIndex">The zero-based <see cref="T:System.Collections.Generic.IList`1"/> index at which the range starts.</param>
            <param name="count">The number of elements the range.</param>
            <returns>A shallow copy of a range of elements the source <see cref="T:System.Collections.Generic.IList`1"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.IndexOf``2(System.Collections.Generic.IList{``0},``0,``1)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence withthe entire <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="source"></param>
            <param name="item">The object to locate the <see cref="T:System.Collections.Generic.IList`1"/>. The value can be null for reference types.</param>
            <param name="equalityComparer">The equality comparer that will be used to compare two instances of <typeparamref name="TElement"/>.</param>
            <returns>The zero-based index of the first occurrence of item withthe entire <see cref="T:System.Collections.Generic.IList`1"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.InsertRange``2(System.Collections.Generic.IList{``1},System.Int32,``0)">
            <summary>
            Inserts the elements of a collection into the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="source"></param>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="items">The collection whose elements should be inserted into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.LastIndexOf``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence withthe entire <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="source"></param>
            <param name="item">The object to locate the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>The zero-based index of the last occurrence of item withthe entire the <see cref="T:System.Collections.Generic.IList`1"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.LastIndexOf``2(System.Collections.Generic.IList{``0},``0,``1)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence withthe entire <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="source"></param>
            <param name="item">The object to locate the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="equalityComparer">The equality comparer that will be used to compare two instances of <typeparamref name="TElement"/>.</param>
            <returns>The zero-based index of the last occurrence of item withthe entire the <see cref="T:System.Collections.Generic.IList`1"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.MoveItem``1(System.Collections.Generic.IList{``0},System.Int32,Narumikazuchi.Collections.ItemMoveDirection)">
            <summary>
            Moves the item at the given index one position the specified direction the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.MoveItem``1(System.Collections.Generic.IList{``0},System.Int32,Narumikazuchi.Collections.ItemMoveDirection,System.Int32)">
            <summary>
            Moves the item at the given index the given amount of positions the specified direction the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.MoveItem``1(System.Collections.Generic.IList{``0},``0,Narumikazuchi.Collections.ItemMoveDirection)">
            <summary>
            Moves the item one position the specified direction the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.MoveItem``1(System.Collections.Generic.IList{``0},``0,Narumikazuchi.Collections.ItemMoveDirection,System.Int32)">
            <summary>
            Moves the item at the given index the given amount of positions the specified direction the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Extensions.ListExtensions.RemoveRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="source"></param>
            <param name="startIndex">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="T:Narumikazuchi.Collections.BinaryNode`1">
            <summary>
            Represents a node of a <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.BinaryNode`1.Value">
            <summary>
            Gets the <typeparamref name="TValue"/> value of this <see cref="T:Narumikazuchi.Collections.BinaryNode`1"/>.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.BinaryNode`1.Parent">
            <summary>
            Gets the parent of the current <see cref="T:Narumikazuchi.Collections.BinaryNode`1"/>. Should return <see langword="null"/> for root nodes.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.BinaryNode`1.LeftChild">
            <summary>
            Gets the left child <see cref="T:Narumikazuchi.Collections.BinaryNode`1"/>. Returns <see langword="null"/> if the <see cref="T:Narumikazuchi.Collections.BinaryNode`1"/> has no left sided child node.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.BinaryNode`1.RightChild">
            <summary>
            Gets the right child <see cref="T:Narumikazuchi.Collections.BinaryNode`1"/>. Returns <see langword="null"/> if the <see cref="T:Narumikazuchi.Collections.BinaryNode`1"/> has no right sided child node.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.BinaryNode`1.Depth">
            <summary>
            Gets the depth of this node in it's corresponding <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>. Should be 0 for root nodes.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.BinaryNode`1.IsLeaf">
            <summary>
            Gets whether this <see cref="T:Narumikazuchi.Collections.BinaryNode`1"/> has no more child-nodes.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.BinaryTraversalMethod">
            <summary>
            Defines the Traversal method for a <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.BinaryTree`2">
            <summary>
            Represents a fast binary lookup data structure.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.BinaryTree`2.AddRange``1(``0)">
            <summary>
            Adds the elements of the specified <typeparamref name="TEnumerable"/> to the <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>.
            </summary>
            <param name="enumerable">The collection of items to add.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.BinaryTree`2.Find(`0)">
            <summary>
            Finds the first <see cref="T:Narumikazuchi.Collections.BinaryNode`1"/> matching the specified value.
            </summary>
            <param name="value">The value to lookup in the tree.</param>
            <returns>The <see cref="T:Narumikazuchi.Collections.BinaryNode`1"/> which contains the specified value or <see langword="null"/> if no node with such value exists in the tree.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.BinaryTree`2.RemoveAll(System.Func{`0,System.Boolean})">
            <summary>
            Removes all <see cref="T:Narumikazuchi.Collections.BinaryNode`1"/> objects from the <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>, only when their <typeparamref name="TValue"/> matches the specified condition.
            </summary>
            <param name="predicate">The condition that the <typeparamref name="TValue"/> needs to meet to be deleted.</param>
            <returns>The number of <see cref="T:Narumikazuchi.Collections.BinaryNode`1"/> objects that have been removed.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.BinaryTree`2.GetDepth">
            <summary>
            Gets the depth of the <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>.
            </summary>
            <returns>The depth of the deepest <see cref="T:Narumikazuchi.Collections.BinaryNode`1"/> in the tree.</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.BinaryTree`2.LowBound">
            <summary>
            Determines the lowest value in the <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>.
            </summary>
            <returns>The <typeparamref name="TValue"/> of the lowest element in the <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>.</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.BinaryTree`2.HighBound">
            <summary>
            Determines the highest value in the <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>.
            </summary>
            <returns>The <typeparamref name="TValue"/> of the highest element in the <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>.</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.BinaryTree`2.Traverse(Narumikazuchi.Collections.BinaryTraversalMethod@)">
            <summary>
            Returns an <see cref="T:Narumikazuchi.Collections.IStrongEnumerable`2"/> containing the <typeparamref name="TValue"/> in the traversed order.
            </summary>
            <param name="traverseMethod">The method to use when traversing.</param>
            <returns>An <see cref="T:Narumikazuchi.Collections.IStrongEnumerable`2"/> containing all <typeparamref name="TValue"/> in this <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/> in the order specified by the <paramref name="traverseMethod"/>.</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.BinaryTree`2.Create(`0,`1)">
            <summary>
            Instantiates a new <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/> with the <paramref name="root"/> as root node.
            </summary>
            <param name="root">The value of the root node.</param>
            <param name="comparer">The comparer that will be used to compare two <typeparamref name="TValue"/> instances.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="P:Narumikazuchi.Collections.BinaryTree`2.RootNode">
            <summary>
            Gets the root for the <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.BinaryTree`2.ThrowExceptionOnDuplicate">
            <summary>
            Gets or sets if an exception should be thrown when trying to add a duplicate <typeparamref name="TValue"/>.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.BinaryTree`2.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.BinaryTree`2.Add(`0)">
            <summary>
            Adds an element to the <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>.
            </summary>
            <param name="element">The element to add to the <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>.</param>
            <returns><see langword="true"/> if the element was added to the <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.BinaryTree`2.AddRange``2(``0)">
            <summary>
            Adds all elements of an enumerable to the <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>.
            </summary>
            <param name="enumerable">The elements to add to the <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.BinaryTree`2.Clear">
            <summary>
            Removes all elements from the <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.BinaryTree`2.Remove(`0)">
            <summary>
            Removes the first occurrence of an element from the <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>.
            </summary>
            <param name="element">Tehe element to remove from the <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>.</param>
            <returns><see langword="true"/> if the element was removed from the <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.BinaryTree`2.Contains(`0)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.BinaryTree`2.CopyTo(`0[])">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.BinaryTree`2.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.BinaryTree`2.Comparer">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.BinaryTree`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.BinaryTree`2.Enumerator">
            <summary>
            An enumerator that iterates through the <see cref="T:Narumikazuchi.Collections.BinaryTree`2"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.BinaryTree`2.Enumerator.#ctor">
            <summary>
            The default constructor for the <see cref="T:Narumikazuchi.Collections.BinaryTree`2.Enumerator"/> is not allowed.
            </summary>
            <exception cref="T:Narumikazuchi.NotAllowed"></exception>
        </member>
        <member name="M:Narumikazuchi.Collections.BinaryTree`2.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.BinaryTree`2.Enumerator.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.BinaryTree`2.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.CommonArrayEnumerator`1">
            <summary>
            An enumerator that iterates through an array of type <typeparamref name="TElement"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.CommonArrayEnumerator`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.CommonArrayEnumerator`1"/> struct.
            </summary>
            <param name="items">The array containing the items to iterate through.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.CommonArrayEnumerator`1.#ctor(System.Collections.Immutable.ImmutableArray{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.CommonArrayEnumerator`1"/> struct.
            </summary>
            <param name="items">The array containing the items to iterate through.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.CommonArrayEnumerator`1.MoveNext">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.CommonArrayEnumerator`1.Current">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.CommonDictionaryEnumerator`2">
            <summary>
            An enumerator that iterates through the <see cref="T:Narumikazuchi.Collections.ReadOnlySortedDictionary`4"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.CommonDictionaryEnumerator`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.CommonArrayEnumerator`1"/> struct.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the key-value pairs to iterate through.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Narumikazuchi.Collections.CommonDictionaryEnumerator`2.#ctor(System.Collections.Immutable.ImmutableDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.CommonArrayEnumerator`1"/> struct.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Immutable.ImmutableDictionary`2"/> containing the key-value pairs to iterate through.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Narumikazuchi.Collections.CommonDictionaryEnumerator`2.MoveNext">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.CommonDictionaryEnumerator`2.Current">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.CommonHashSetEnumerator`1">
            <summary>
            An enumerator that iterates through a <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.CommonHashSetEnumerator`1.#ctor(System.Collections.Generic.HashSet{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.CommonHashSetEnumerator`1"/> struct.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.HashSet`1"/> containing the items to iterate through.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.CommonHashSetEnumerator`1.MoveNext">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.CommonHashSetEnumerator`1.Current">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.CommonListEnumerator`1">
            <summary>
            An enumerator that iterates through a <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.CommonListEnumerator`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.CommonListEnumerator`1"/> struct.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.List`1"/> containing the items to iterate through.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.CommonListEnumerator`1.MoveNext">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.CommonListEnumerator`1.Current">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.ICollectionWithCount`2">
            <summary>
            Represents a strongly-typed collection that exposes it's element count.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.ICollectionWithCount`2.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.ICollectionWithReadIndexer`2">
            <summary>
            Represents a strongly-typed collection which allows read access to it's elements via an indexer.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ICollectionWithReadIndexer`2.IndexOf(`0)">
            <summary>
            Searches for the specified <typeparamref name="TElement"/> and returns the zero-based index of the first
            occurrence within the entire <see cref="T:Narumikazuchi.Collections.ICollectionWithReadIndexer`2"/>.
            </summary>
            <param name="element">The <typeparamref name="TElement"/> to locate.</param>
            <returns>
            The zero-based index of the first occurrence of item within the entire 
            <see cref="T:Narumikazuchi.Collections.ICollectionWithReadIndexer`2"/>, if found; otherwise, -1.
            </returns>
        </member>
        <member name="P:Narumikazuchi.Collections.ICollectionWithReadIndexer`2.Item(System.Int32)">
            <summary>
            Gets the <typeparamref name="TElement"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <typeparamref name="TElement"/> to get.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException"/>
        </member>
        <member name="P:Narumikazuchi.Collections.ICollectionWithReadIndexer`2.Item(System.Index)">
            <summary>
            Gets the <typeparamref name="TElement"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <typeparamref name="TElement"/> to get.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException"/>
        </member>
        <member name="P:Narumikazuchi.Collections.ICollectionWithReadIndexer`2.Item(System.Range)">
            <summary>
            Gets a slice specified by a range.
            </summary>
            <param name="range">The zero-based range of the slice to get.</param>
            <returns>The slice specified by the range.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="T:Narumikazuchi.Collections.ICollectionWithReadWriteIndexer`2">
            <summary>
            Represents a strongly-typed collection which allows read-write access to it's elements via an indexer.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.ICollectionWithReadWriteIndexer`2.Item(System.Int32)">
            <summary>
            Gets or sets the <typeparamref name="TElement"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <typeparamref name="TElement"/> to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException"/>
        </member>
        <member name="P:Narumikazuchi.Collections.ICollectionWithReadWriteIndexer`2.Item(System.Index)">
            <summary>
            Gets or sets the <typeparamref name="TElement"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <typeparamref name="TElement"/> to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException"/>
        </member>
        <member name="T:Narumikazuchi.Collections.ICollectionWithWriteIndexer`2">
            <summary>
            Represents a strongly-typed collection which allows write access to it's elements via an indexer.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.ICollectionWithWriteIndexer`2.Item(System.Int32)">
            <summary>
            Sets the <typeparamref name="TElement"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <typeparamref name="TElement"/> to set.</param>
            <exception cref="T:System.IndexOutOfRangeException"/>
        </member>
        <member name="P:Narumikazuchi.Collections.ICollectionWithWriteIndexer`2.Item(System.Index)">
            <summary>
            Sets the <typeparamref name="TElement"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <typeparamref name="TElement"/> to set.</param>
            <exception cref="T:System.IndexOutOfRangeException"/>
        </member>
        <member name="T:Narumikazuchi.Collections.ILookup`4">
            <summary>
            Represents a strongly-typed collection of key-value pairs.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ILookup`4.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the <see cref="T:Narumikazuchi.Collections.ILookup`4"/>.
            </summary>
            <param name="key">The key to add to the collection.</param>
            <param name="value">The corresponding value to the key added to the collection.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.ILookup`4.AddRange``2(``0)">
            <summary>
            Adds the specified key-value pairs to the <see cref="T:Narumikazuchi.Collections.ILookup`4"/>.
            </summary>
            <param name="enumerable">The enumerable that contains the key-value pairs to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.ILookup`4.Remove(`0)">
            <summary>
            Removes the key-value pair with the specified key from the collection.
            </summary>
            <param name="key">The key of the key-value pair to remove.</param>
            <returns><see langword="true"/> if the key-value pair has been removed from the collection; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.ILookup`4.Clear">
            <summary>
            Removes all elements from this collection.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.IModifyableCollectionWithIndex`2">
            <summary>
            Represents a strongly-typed collection that can be modified and accessed by index.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.IModifyableCollectionWithIndex`2.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified element at the specified index in the <see cref="T:Narumikazuchi.Collections.IModifyableCollectionWithIndex`2"/>.
            </summary>
            <param name="index">The zer-based index of the location where to insert the element.</param>
            <param name="element">The element to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.IModifyableCollectionWithIndex`2.InsertRange``2(System.Int32,``0)">
            <summary>
            Inserts the specified collection of elements into the <see cref="T:Narumikazuchi.Collections.IModifyableCollectionWithIndex`2"/>
            starting at the specified index.
            </summary>
            <param name="index">The zero-based index of the location where to start inserting the elements.</param>
            <param name="enumerable">The elements to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.IModifyableCollectionWithIndex`2.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <returns><see langword="true"/> if the element was removed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Narumikazuchi.Collections.IModifyableCollection`2">
            <summary>
            Represents a strongly-typed collection that can be modified.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.IModifyableCollection`2.Add(`0)">
            <summary>
            Adds an element to the <see cref="T:Narumikazuchi.Collections.IModifyableCollection`2"/>.
            </summary>
            <param name="element">The element to add to the <see cref="T:Narumikazuchi.Collections.IModifyableCollection`2"/>.</param>
            <returns><see langword="true"/> if the element was added to the <see cref="T:Narumikazuchi.Collections.IModifyableCollection`2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.IModifyableCollection`2.AddRange``2(``0)">
            <summary>
            Adds all elements of an enumerable to the <see cref="T:Narumikazuchi.Collections.IModifyableCollection`2"/>.
            </summary>
            <param name="enumerable">The elements to add to the <see cref="T:Narumikazuchi.Collections.IModifyableCollection`2"/>.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.IModifyableCollection`2.Clear">
            <summary>
            Removes all elements from the <see cref="T:Narumikazuchi.Collections.IModifyableCollection`2"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.IModifyableCollection`2.Remove(`0)">
            <summary>
            Removes the first occurrence of an element from the <see cref="T:Narumikazuchi.Collections.IModifyableCollection`2"/>.
            </summary>
            <param name="element">Tehe element to remove from the <see cref="T:Narumikazuchi.Collections.IModifyableCollection`2"/>.</param>
            <returns><see langword="true"/> if the element was removed from the <see cref="T:Narumikazuchi.Collections.IModifyableCollection`2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Narumikazuchi.Collections.IReadOnlyCollection`2">
            <summary>
            Represents a strongly-typed read-only collection of elements.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.IReadOnlyCollection`2.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Narumikazuchi.Collections.IReadOnlyCollection`2"/> contains the specifiec element.
            </summary>
            <param name="element">The element to locate in the <see cref="T:Narumikazuchi.Collections.IReadOnlyCollection`2"/>.</param>
            <returns><see langword="true"/> if the element is found in the <see cref="T:Narumikazuchi.Collections.IReadOnlyCollection`2"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.IReadOnlyCollection`2.CopyTo(`0[])">
            <summary>
            Copies the entire <see cref="T:Narumikazuchi.Collections.IReadOnlyCollection`2"/> to a compatible one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Narumikazuchi.Collections.IReadOnlyCollection`2"/>.
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.IReadOnlyCollection`2.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:Narumikazuchi.Collections.IReadOnlyCollection`2"/> to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Narumikazuchi.Collections.IReadOnlyCollection`2"/>.
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="destinationIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="T:Narumikazuchi.Collections.IReadOnlyLookup`4">
            <summary>
            Represents a strongly-typed read-only collection of key-value pairs.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.IReadOnlyLookup`4.ContainsKey(`0)">
            <summary>
            Returns whether the <see cref="T:Narumikazuchi.Collections.IReadOnlyLookup`4"/> contains the specified key.
            </summary>
            <param name="key">The key to search in the lookup.</param>
            <returns><see langword="true"/> if the key was found in the <see cref="T:Narumikazuchi.Collections.IReadOnlyLookup`4"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.IReadOnlyLookup`4.ContainsValue(`1)">
            <summary>
            Returns whether the <see cref="T:Narumikazuchi.Collections.IReadOnlyLookup`4"/> contains the specified value.
            </summary>
            <param name="value">The value to search in the lookup.</param>
            <returns><see langword="true"/> if the value was found in the <see cref="T:Narumikazuchi.Collections.IReadOnlyLookup`4"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.IReadOnlyLookup`4.TryGetValue(`0,`1@)">
            <summary>
            Returns whether the <see cref="T:Narumikazuchi.Collections.IReadOnlyLookup`4"/> could retrieve the value for the specified key.
            </summary>
            <param name="key">The key to search in the <see cref="T:Narumikazuchi.Collections.IReadOnlyLookup`4"/>.</param>
            <param name="value">The value that corresponds the the key.</param>
            <returns><see langword="true"/> if the key was found in the <see cref="T:Narumikazuchi.Collections.IReadOnlyLookup`4"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Narumikazuchi.Collections.IReadOnlyLookup`4.Item(`0)">
            <summary>
            Returns the value that is identified by the specified key.
            </summary>
            <param name="key">The key to search in the <see cref="T:Narumikazuchi.Collections.IReadOnlyLookup`4"/>.</param>
            <returns>The value that is identified by the specified key.</returns>
        </member>
        <member name="P:Narumikazuchi.Collections.IReadOnlyLookup`4.Keys">
            <summary>
            Gets a collection that contains all the keys that are present in the <see cref="T:Narumikazuchi.Collections.IReadOnlyLookup`4"/>.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.IReadOnlyLookup`4.Values">
            <summary>
            Gets a collection that contains all the values that are present in the <see cref="T:Narumikazuchi.Collections.IReadOnlyLookup`4"/>.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.IReadOnlyLookup`4.EqualityComparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the <see cref="T:Narumikazuchi.Collections.IReadOnlyLookup`4"/>.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.ISortedCollection`3">
            <summary>
            Represents a strongly-typed read-only collection of elements.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.ISortedCollection`3.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IComparer`1"/> which is used by the <see cref="T:Narumikazuchi.Collections.ISortedCollection`3"/>.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.ISortedDictionary`5">
            <summary>
            Represents a strongly-typed read-only dictionary of elements.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.ISortedDictionary`5.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IComparer`1"/> which is used by the <see cref="T:Narumikazuchi.Collections.ISortedCollection`3"/>.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.IStrongEnumerable`2">
            <summary>
            Allows for the implementing object to optimize the generated IL code by
            providing a specific type instead of an interface for the <see cref="M:Narumikazuchi.Collections.IStrongEnumerable`2.GetEnumerator"/>
            method. Using this interface will reduce the delegation cost of virtual IL calls
            and therefore improve iteration times of <see langword="foreach"/>-loops.
            </summary>
            <remarks>
            The idea for this interface and it's implementation is taken from the official source
            code of the <see cref="N:System.Collections.Immutable"/> namespace.
            </remarks>
        </member>
        <member name="M:Narumikazuchi.Collections.IStrongEnumerable`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Narumikazuchi.Collections.IStrongEnumerator`1">
            <summary>
            Allows for the implementing object to optimize the generated IL code by
            providing a specific type instead of an interface for the 
            <see cref="M:Narumikazuchi.Collections.IStrongEnumerable`2.GetEnumerator"/> method. 
            Using this interface will reduce the delegation cost of virtual IL calls
            and therefore improve iteration times of <see langword="foreach"/>-loops.
            This interface also removes the requirement of the implementation of the
            <see cref="M:System.IDisposable.Dispose"/> method, making the resulting type 
            even more memory efficient.
            </summary>
            <remarks>
            The idea for this interface and it's implementation is taken from the official source
            code of the <see cref="N:System.Collections.Immutable"/> namespace.
            </remarks>
        </member>
        <member name="T:Narumikazuchi.Collections.ObservableCollection`1">
            <summary>
            Represents a strongly typed collection of objects of type <typeparamref name="TElement"/>, which reports changes.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableCollection`1.Create">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ObservableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableCollection`1.CreateFrom``1(``0)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ObservableCollection`1"/> class.
            </summary>
            <param name="items">The items that the resulting collection shall hold.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableCollection`1.CreateFrom``2(``0)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ObservableCollection`1"/> class.
            </summary>
            <param name="items">The items that the resulting collection shall hold.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ObservableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ObservableCollection`1"/> class.
            </summary>
            <param name="items">The items that the resulting collection shall hold.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="P:Narumikazuchi.Collections.ObservableCollection`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableCollection`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableCollection`1.AddRange``2(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableCollection`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableCollection`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="E:Narumikazuchi.Collections.ObservableCollection`1.CollectionChanged">
            <inheritdoc/>
        </member>
        <member name="E:Narumikazuchi.Collections.ObservableCollection`1.PropertyChanging">
            <inheritdoc/>
        </member>
        <member name="E:Narumikazuchi.Collections.ObservableCollection`1.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableCollection`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableCollection`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableCollection`1.CopyTo(`0[])">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableCollection`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.ObservableList`1">
            <summary>
            Represents a strongly typed list of objects of type <typeparamref name="TElement"/>, which reports changes and can be accessed by index. 
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableList`1.Create">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ObservableList`1"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableList`1.CreateFrom``1(``0)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ObservableList`1"/> class.
            </summary>
            <param name="items">The items that the resulting collection shall hold.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableList`1.CreateFrom``2(``0)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ObservableList`1"/> class.
            </summary>
            <param name="items">The items that the resulting collection shall hold.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ObservableList`1"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableList`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ObservableList`1"/> class.
            </summary>
            <param name="items">The items that the resulting collection shall hold.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="P:Narumikazuchi.Collections.ObservableList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Narumikazuchi.Collections.ObservableList`1.Item(System.Index)">
            <inheritdoc />
        </member>
        <member name="P:Narumikazuchi.Collections.ObservableList`1.Item(System.Range)">
            <inheritdoc />
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableList`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableList`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableList`1.InsertRange``2(System.Int32,``0)">
            <inheritdoc />
        </member>
        <member name="M:Narumikazuchi.Collections.ObservableList`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Narumikazuchi.Collections.ReadOnlyCollection`1">
            <summary>
            Represents a strongly-typed collection of elements with a significantly faster enumerator to
            improve iteration times for <see langword="foreach"/>-loops.
            </summary>
            <remarks>
            The faster enumeration only works if the collection is used as-is or by using the
            <see cref="T:Narumikazuchi.Collections.IStrongEnumerable`2"/> interface. If you you plan on using 
            any derivative of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface (i.e. <see cref="T:System.Collections.Generic.ICollection`1"/>) 
            in your code then the efficiency of the enumerator will be lost due to call virtualization in 
            the compiler generated IL.
            </remarks>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlyCollection`1"/> struct.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyCollection`1.Create">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlyCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyCollection`1.CreateFrom``1(``0)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlyCollection`1"/> struct.
            </summary>
            <param name="items">The items that the resulting collection shall hold.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyCollection`1.CreateFrom``2(``0)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlyCollection`1"/> struct.
            </summary>
            <param name="items">The items that the resulting collection shall hold.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlyCollection`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyCollection`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyCollection`1.CopyTo(`0[])">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyCollection`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.ReadOnlyDictionary`3">
            <summary>
            Represents a strongly-typed collection of key-value pairs with a significantly faster enumerator to
            improve iteration times for <see langword="foreach"/>-loops.
            </summary>
            <remarks>
            The faster enumeration only works if the collection is used as-is or by using the
            <see cref="T:Narumikazuchi.Collections.IStrongEnumerable`2"/> interface. If you you plan on using 
            the <see cref="T:System.Collections.Generic.IEnumerable`1"/> or any other derivative interface in your code then the 
            efficiency of the enumerator will be lost due to call virtualization in the compiler generated IL.
            </remarks>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyDictionary`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlyDictionary`3"/> struct.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyDictionary`3.Create">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlyDictionary`3"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyDictionary`3.CreateFrom``1(``0,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlyDictionary`3"/> struct.
            </summary>
            <param name="items">The items that the resulting collection shall hold.</param>
            <param name="equalityComparer">The comparer that will be used to compare two instances of type <typeparamref name="TKey"/> for equality.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyDictionary`3.CreateFrom``2(``0,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlyDictionary`3"/> struct.
            </summary>
            <param name="items">The items that the resulting collection shall hold.</param>
            <param name="equalityComparer">The comparer that will be used to compare two instances of type <typeparamref name="TKey"/> for equality.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlyDictionary`3.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyDictionary`3.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyDictionary`3.ContainsValue(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyDictionary`3.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlyDictionary`3.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlyDictionary`3.Keys">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlyDictionary`3.Values">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlyDictionary`3.EqualityComparer">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyDictionary`3.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.ReadOnlyList`1">
            <summary>
            Represents a strongly-typed collection of elements with a significantly faster enumerator to
            improve iteration times for <see langword="foreach"/>-loops. The elements of this collection
            can be accessed by index.
            </summary>
            <remarks>
            The faster enumeration only works if the collection is used as-is or by using the
            <see cref="T:Narumikazuchi.Collections.IStrongEnumerable`2"/> interface. If you you plan on using 
            the <see cref="T:System.Collections.Generic.IEnumerable`1"/> or any other derivative interface in your code then the 
            efficiency of the enumerator will be lost due to call virtualization in the compiler generated IL.
            </remarks>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlyList`1"/> struct.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyList`1.Create">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlyList`1"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyList`1.CreateFrom``1(``0)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlyList`1"/> struct.
            </summary>
            <param name="items">The items that the resulting collection shall hold.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyList`1.CreateFrom``2(``0)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlyList`1"/> struct.
            </summary>
            <param name="items">The items that the resulting collection shall hold.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlyList`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlyList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlyList`1.Item(System.Index)">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlyList`1.Item(System.Range)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyList`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyList`1.CopyTo(`0[])">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlyList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.ReadOnlySortedCollection`2">
            <summary>
            Represents a strongly-typed collection of elements with a significantly faster enumerator to
            improve iteration times for <see langword="foreach"/>-loops.
            </summary>
            <remarks>
            The faster enumeration only works if the collection is used as-is or by using the
            <see cref="T:Narumikazuchi.Collections.IStrongEnumerable`2"/> interface. If you you plan on using 
            the <see cref="T:System.Collections.Generic.IEnumerable`1"/> or <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> interface in your 
            code then the efficiency of the enumerator will be lost due to call virtualization in the 
            compiler generated IL.
            </remarks>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedCollection`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlySortedCollection`2"/> struct.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedCollection`2.Create">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlySortedCollection`2"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedCollection`2.CreateFrom``1(``0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlySortedCollection`2"/> struct.
            </summary>
            <param name="items">The items that the resulting collection shall hold.</param>
            <param name="comparer">The comparer that will be used to compare two instances of type <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedCollection`2.CreateFrom``2(``0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlySortedCollection`2"/> struct.
            </summary>
            <param name="items">The items that the resulting collection shall hold.</param>
            <param name="comparer">The comparer that will be used to compare two instances of type <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlySortedCollection`2.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedCollection`2.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedCollection`2.CopyTo(`0[])">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedCollection`2.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlySortedCollection`2.Comparer">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedCollection`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.ReadOnlySortedDictionary`4">
            <summary>
            Represents a strongly-typed collection of key-value pairs with a significantly faster enumerator to
            improve iteration times for <see langword="foreach"/>-loops. The key-value pairs are sorted by using
            the provided <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <remarks>
            The faster enumeration only works if the collection is used as-is or by using the
            <see cref="T:Narumikazuchi.Collections.IStrongEnumerable`2"/> interface. If you you plan on using 
            the <see cref="T:System.Collections.Generic.IEnumerable`1"/> or any other derivative interface in your code then the 
            efficiency of the enumerator will be lost due to call virtualization in the compiler generated IL.
            </remarks>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedDictionary`4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlySortedDictionary`4"/> struct.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedDictionary`4.Create">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlySortedDictionary`4"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedDictionary`4.CreateFrom``1(``0,`3,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlySortedDictionary`4"/> struct.
            </summary>
            <param name="items">The items that the resulting collection shall hold.</param>
            <param name="equalityComparer">The comparer that will be used to compare two instances of type <typeparamref name="TKey"/> for equality.</param>
            <param name="comparer">The comparer that will be used to compare two instances of type <typeparamref name="TKey"/>.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedDictionary`4.CreateFrom``2(``0,`3,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlySortedDictionary`4"/> struct.
            </summary>
            <param name="items">The items that the resulting collection shall hold.</param>
            <param name="equalityComparer">The comparer that will be used to compare two instances of type <typeparamref name="TKey"/> for equality.</param>
            <param name="comparer">The comparer that will be used to compare two instances of type <typeparamref name="TKey"/>.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlySortedDictionary`4.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedDictionary`4.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedDictionary`4.ContainsValue(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedDictionary`4.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlySortedDictionary`4.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlySortedDictionary`4.Keys">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlySortedDictionary`4.Values">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlySortedDictionary`4.EqualityComparer">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlySortedDictionary`4.Comparer">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedDictionary`4.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.ReadOnlySortedList`2">
            <summary>
            Represents a strongly-typed collection of elements with a significantly faster enumerator to
            improve iteration times for <see langword="foreach"/>-loops. The elements of this collection
            can be accessed by index and are sorted upon instatiation using either the default comparer
            or the provided one.
            </summary>
            <remarks>
            The faster enumeration only works if the collection is used as-is or by using the
            <see cref="T:Narumikazuchi.Collections.IStrongEnumerable`2"/> interface. If you you plan on using 
            the <see cref="T:System.Collections.Generic.IEnumerable`1"/> or <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> interface in your 
            code then the efficiency of the enumerator will be lost due to call virtualization in the 
            compiler generated IL.
            </remarks>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedList`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlySortedList`2"/> struct.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedList`2.Create">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlySortedList`2"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedList`2.CreateFrom``1(``0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlySortedList`2"/> struct.
            </summary>
            <param name="items">The items that the resulting collection shall hold.</param>
            <param name="comparer">The comparer that will be used to compare two instances of type <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedList`2.CreateFrom``2(``0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.ReadOnlySortedList`2"/> struct.
            </summary>
            <param name="items">The items that the resulting collection shall hold.</param>
            <param name="comparer">The comparer that will be used to compare two instances of type <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlySortedList`2.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedList`2.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlySortedList`2.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlySortedList`2.Item(System.Index)">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlySortedList`2.Item(System.Range)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedList`2.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedList`2.CopyTo(`0[])">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedList`2.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.ReadOnlySortedList`2.Comparer">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.ReadOnlySortedList`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.SortedCollection`2">
            <summary>
            Represents a strongly typed collection of sorted objects of type <typeparamref name="TElement"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.SortedCollection`2.Create(System.Int32@,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.SortedCollection`2"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
            <param name="comparer">The comparer that will be used to compare two instances of type <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.SortedCollection`2.CreateFrom``1(``0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.SortedCollection`2"/> class.
            </summary>
            <param name="collection">The collection of items that this collection will initially hold.</param>
            <param name="comparer">The comparer that will be used to compare two instances of type <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.SortedCollection`2.CreateFrom``2(``0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.SortedCollection`2"/> class.
            </summary>
            <param name="collection">The collection of items that this collection will initially hold.</param>
            <param name="comparer">The comparer that will be used to compare two instances of type <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.SortedCollection`2.#ctor(System.Int32@,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.SortedCollection`2"/> class.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
            <param name="comparer">The comparer that will be used to compare two instances of type <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.SortedCollection`2.#ctor(System.Collections.Generic.List{`0},`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Collections.SortedCollection`2"/> class.
            </summary>
            <param name="collection">The collection of items that this collection will initially hold.</param>
            <param name="comparer">The comparer that will be used to compare two instances of type <typeparamref name="TElement"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="P:Narumikazuchi.Collections.SortedCollection`2.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.SortedCollection`2.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.SortedCollection`2.AddRange``2(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.SortedCollection`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.SortedCollection`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.SortedCollection`2.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.SortedCollection`2.CopyTo(`0[])">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.SortedCollection`2.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.SortedCollection`2.Comparer">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.SortedCollection`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.TrieNodeComparer`1">
            <summary>
            Provides the default functionality for comparing two <see cref="T:Narumikazuchi.Collections.TrieNode`1"/> objects.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.TrieNodeComparer`1.Instance">
            <summary>
            Gets the singleton instance of this <see cref="T:Narumikazuchi.Collections.TrieNodeComparer`1"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.TrieNodeComparer`1.Compare(Narumikazuchi.Collections.TrieNode{`0},Narumikazuchi.Collections.TrieNode{`0})">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.TrieNode`1">
            <summary>
            Represents a node in a <see cref="T:Narumikazuchi.Collections.Trie`1"/> data structure. Items of type <typeparamref name="TContent"/> can be attached to this <see cref="T:Narumikazuchi.Collections.TrieNode`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.TrieNode`1.AddRange``1(``0)">
            <summary>
            Adds the elements of the specified collection to the <see cref="T:Narumikazuchi.Collections.TrieNode`1"/>.
            </summary>
            <param name="enumerable">The collection of items to add.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.TrieNode`1.RemoveAll(System.Func{`0,System.Boolean})">
            <summary>
            Removes all objects from the <see cref="T:Narumikazuchi.Collections.TrieNode`1"/> that match the specified condition.
            </summary>
            <param name="predicate">The condition that objects need to meet to be deleted.</param>
            <returns>The amount of items removed</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.TrieNode`1.FindChildNode(System.Char)">
            <summary>
            Finds the child-node with the specified value. Returns <see langword="null"/> if no <see cref="T:Narumikazuchi.Collections.TrieNode`1"/> with the specified value exists.
            </summary>
            <param name="value">The value to lookup in the child-nodes of the <see cref="T:Narumikazuchi.Collections.TrieNode`1"/>.</param>
        </member>
        <member name="M:Narumikazuchi.Collections.TrieNode`1.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.TrieNode`1.Value">
            <summary>
            Gets the <see cref="T:System.Char"/> value of this <see cref="T:Narumikazuchi.Collections.TrieNode`1"/>.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.TrieNode`1.Parent">
            <summary>
            Gets the parent of the current node. Should return <see langword="null"/> for root nodes.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.TrieNode`1.Depth">
            <summary>
            Gets the depth of this node in it's corresponding tree. Should be 0 for root nodes.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.TrieNode`1.IsLeaf">
            <summary>
            Gets whether this <see cref="T:Narumikazuchi.Collections.TrieNode`1"/> has no more child-nodes.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.TrieNode`1.Children">
            <summary>
            Gets the child nodes of this <see cref="T:Narumikazuchi.Collections.TrieNode`1"/>.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.TrieNode`1.Items">
            <summary>
            Gets the items associated with this <see cref="T:Narumikazuchi.Collections.TrieNode`1"/>.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.TrieNode`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.TrieNode`1.Add(`0)">
            <summary>
            Adds an object to the <see cref="T:Narumikazuchi.Collections.TrieNode`1"/>.
            </summary>
            <param name="item">The value to be added to the <see cref="T:Narumikazuchi.Collections.TrieNode`1"/>.</param>
            <returns><see langword="true"/> if the item was added; otherwise, <see langword="false"/></returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.TrieNode`1.AddRange``2(``0)">
            <summary>
            Adds the elements of the specified collection to the <see cref="T:Narumikazuchi.Collections.TrieNode`1"/>.
            </summary>
            <param name="enumerable">The collection of items to add.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.TrieNode`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:Narumikazuchi.Collections.TrieNode`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.TrieNode`1.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified item from the <see cref="T:Narumikazuchi.Collections.TrieNode`1"/>.
            </summary>
            <param name="item">The item to remove.</param>
            <returns><see langword="true"/> if the item was found and removed; otherwise, <see langword="false"/></returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.TrieNode`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Narumikazuchi.Collections.TrieNode`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Narumikazuchi.Collections.TrieNode`1"/>.</param>
            <returns><see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:Narumikazuchi.Collections.TrieNode`1"/>; otherwise, <see langword="false"/></returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.TrieNode`1.CopyTo(`0[])">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.TrieNode`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.TrieNode`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.TrieNode`1.Enumerator">
            <summary>
            An enumerator that iterates through the contents of the <see cref="T:Narumikazuchi.Collections.TrieNode`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.TrieNode`1.Enumerator.#ctor">
            <summary>
            The default constructor for the <see cref="T:Narumikazuchi.Collections.TrieNode`1.Enumerator"/> is not allowed.
            </summary>
            <exception cref="T:Narumikazuchi.NotAllowed"></exception>
        </member>
        <member name="M:Narumikazuchi.Collections.TrieNode`1.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.TrieNode`1.Enumerator.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.TrieNode`1.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.Trie`1">
            <summary>
            Represents a very fast but memory costly word lookup data structure. Includes the attaching of objects of type <typeparamref name="TContent"/> to any individual <see cref="T:Narumikazuchi.Collections.TrieNode`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.#ctor">
            <summary>
            Instantiates an empty <see cref="T:Narumikazuchi.Collections.Trie`1"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.#ctor(System.Char[])">
            <summary>
            Instantiates an empty <see cref="T:Narumikazuchi.Collections.Trie`1"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.#ctor(System.Collections.Generic.List{System.Char})">
            <summary>
            Instantiates an empty <see cref="T:Narumikazuchi.Collections.Trie`1"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.#ctor(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Instantiates an empty <see cref="T:Narumikazuchi.Collections.Trie`1"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.Exists(System.Func{System.String,System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.Find(System.Func{System.String,System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.FindAll(System.Func{System.String,System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.FindExcept(System.Func{System.String,System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.FindLast(System.Func{System.String,System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.Insert(System.String@,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.InsertRange``1(System.String@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.InsertRange``2(System.String@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.RemoveAll(System.Func{System.String,System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.Traverse">
            <summary>
            Traverses through the <see cref="T:Narumikazuchi.Collections.Trie`1"/> and returns the inserted words in alphabetic order.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerable"/> which iterates through all inserted words of this <see cref="T:Narumikazuchi.Collections.Trie`1"/></returns>
        </member>
        <member name="P:Narumikazuchi.Collections.Trie`1.RootNode">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.Trie`1.ParentsKnowChildItems">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="E:Narumikazuchi.Collections.Trie`1.CollectionChanged">
            <inheritdoc />
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Narumikazuchi.Collections.Trie`1.CollectionChanged"/> event with the specified event args.
            </summary>
        </member>
        <member name="E:Narumikazuchi.Collections.Trie`1.PropertyChanging">
            <inheritdoc />
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.OnPropertyChanging(System.String)">
            <summary>
            Raises the <see cref="E:Narumikazuchi.Collections.Trie`1.PropertyChanging"/> event with the specified event args.
            </summary>
        </member>
        <member name="E:Narumikazuchi.Collections.Trie`1.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="M:Narumikazuchi.Collections.Trie`1.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Narumikazuchi.Collections.Trie`1.PropertyChanged"/> event with the specified event args.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Collections.Trie`1.Count">
            <inheritdoc />
        </member>
        <member name="T:Narumikazuchi.Collections.INotifyCollectionChangedHelper">
            <summary>
            Implements a way for extensions methods to raise the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.INotifyCollectionChangedHelper.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event with the specified event args.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.ItemMoveDirection">
            <summary>
            Specifies in which direction an item inside a list can be moved.
            </summary>
        </member>
    </members>
</doc>
